%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 247.000000 184.000000
%APL_DSC_Encoding: UTF8
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 247 184
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 247 184
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /I put
dup 34 /c put
dup 35 /e put
dup 36 /percent put
dup 37 /r put
dup 38 /a put
dup 39 /m put
dup 40 /parenleft put
dup 41 /one put
dup 42 /parenright put
dup 43 /two put
dup 44 /three put
dup 45 /four put
dup 46 /five put
dup 47 /six put
dup 48 /seven put
dup 49 /eight put
dup 50 /nine put
dup 51 /s put
dup 52 /zero put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<







0001000000010000C349F3935F0F3CF5011103E800000000B643600000000000D59BEF28FC49FE1F07C304350000000900020000000000000001000003B8FF2B001C08B1FC49FE8007C300010000000000000000000000000000001601F4003303E8005C0103002F0103FFF7022C002A022C0057022C0018022C001D022C001C022C0023022C0026022C0032022C0028022C00220103005202190024021900240219002403550040014D003D01F4001F04BE003700000048018A01D4022002CC02F2037A046004A6053E05FE062A073807F2080C0916098809F00A8A0AB80B5C0B9200000001000000160096000900680004000200000000001E00000200042800030001B800142B01BA0002000200162B01BF0003003E0037002B001F00130000001C2B00BF0002004A0037002B001F00130000001C2B00BA00040004001B2BB8000120457D691844B8000A2BB800002B000000
00>] def
/CharStrings 22 dict dup begin
/.notdef 0 def
/percent 1 def
/parenleft 2 def
/parenright 3 def
/zero 4 def
/one 5 def
/two 6 def
/three 7 def
/four 8 def
/five 9 def
/six 10 def
/seven 11 def
/eight 12 def
/nine 13 def
/I 14 def
/a 15 def
/c 16 def
/e 17 def
/m 18 def
/r 19 def
/s 20 def
/uni2B91 21 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4127891 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C92608F4984E4A5769B1336AE461E05CD208550769783E471D7C20DE95C51309D8BFF0985CA72489C3AB6E0680D2CAA7DBB61EF391F6EEAACD3E1CECC7F6D8ACD10501D50B8FACD476183D2CE2334F06769F039144E3497BD2DC19136398C74EAE6F5DACBAB1108582845220603B780909E1291303F117A7F38B25B4D68E57C290D2579063C8BE9A3AB644BC2F98E6750750BD6511A5080E7B841F1CAF3D81A8756A9D51CFD506AA11CE99BAA51E2F696B624D56A36DBEE9263FBA54844AA4D3E25BD94E9A4BAA19099CB84DCCDBAF1DC14DC0A92A338692C0EA056754C05525CFF9B22441A5DF2857B6C2C7A758FEE7E876E4B6BF4509F5356B2C2451E4F5734F276E63108AF2E105CF2F090437E9243AC39CB3EDBFF8684C2C6F21D664054EBE494FD522B518495B6C109B0EFB30262C84F4532291B5C99B7724412D98E21773DFF65D12D298C2D31F43C31F79306C3B64AB0FD043386AC78F7112FABAB8123EA10E88F7506CBB544060CBB2B9E7051BC1086EFFB261C92B352D13E90DB8630B78693679D3174AD9B4714E43D4F144789F0CDDDFC8E9CDD39E12A03F617420575E7603CC414BE1915F9BC00E9893C6C5DF1B0BF1930CDEE35F1646D85E5E674927B18E822DDF95527C8E154C6DF1B4F1854BAC48E524FF49E2489B6CA2B5973C13A1F042334C6B0364BC23CA4701620A8500DFEB0EB0951D1BED354EF6CF27DE18591462345E60747D5E0256EC5D63A8FA05519170BF14304F1A0472B7C1FB426

04D4C22D32E8AE5C0B64E70C6C1986F6941DA959AFA5CF57C969C08FC16E41936F7F94E885A497BE4912597EEB934D22F7B038D162CCC06384A3454FEDA5A22EBCB34F0C51C913377AF7FA91AE1E02955D0B1446AD64F620CEA32EC95A67D034241453EBD697E8EEBCCAD3CEF7E6E06BDA27B108E9DEC9F3AA2D8E52B5CB60425322A662CCBE1573C8EC94A2D90BE5A99432211BD1BF238F8749FE700E3CA7EF01064B118F3FFBD6D9CFB922E47A3CAC7F6B576D515E3D7A6629E4B081F0A8E43EE028FCCF80EA2DB932B018C69874ADCB22CAC17B5B6A60945579B33A3BC0957A593118C4A9E65FC5A1FA6060CF33D6707D93A6BC75A7E35CA5A38638484B2833B6974D65B00CB843D4A14E80537610B7F53ADCB272F399D2E0A73050664907380AF451351030AFDE8CEB5210FDC95708D4E9189520E718668876790018731C7A3F0D3C82F450A103D87E3241C31063E443DE84147FED04DAF2C181450CB6D84032929E5286985EE9B7440B1256450F4A4E5F57E1A305477EC2553075DF9DB981C66545051487A82A7E8548F22E3D67735417EFF7E9DD9610CBCF7F7566F2A8851E791CCE55FDDB32694C4F1C81B523A840203EB6A334E9EF621C97862C7E946CB8208BA871CD1B07C294FCBD16F8D4A93180BF7ABC64EFD24C20E23B48BE2DED4D25726D5382238BEE3FA75D3FF3984469636A6D4E569581FF7D0CE002BD9718F099C4CB93D698C5444967FD27C6108252B002ADEA585E86C70AD074277AB3194B745347C34CF10D9DF98A87F5F56BAF6A40FFC4878443FA70761C24165F54157E11783290C878D83604ACEFB991E2454A6FB5642B423B604ABA7F52D450B6B371CA97831496DF599BBE2EEE81DF1EEC72726E92F4FF556110ABDAA26664EB54335BEC297B255DED9E14C9A090C0F64596C52BEAEAF25FA92BFF2FE1B7DB76D47CB112CD9C1B496AB21F16C74A6DA215D41A7B18639534ADD581BD630A66CE8BF4C422B7DE9D9661C898C83CB544C91212D79551BDA6B1DA6776A7FF6752987B11500F4AF4F4698F353ABD1BD2804CD20E49A3E795FFB035DE45EB89220C4D961A8C109B8CC6CC93E83187024F758CFC178D3E483EFD68DC41BBC8A46E16303356EAB59890A72CAF00FA5D85B149CAA610D74F72E68AB042A6462D491404EDDC5D52824FF9708307F8058B4E3A22EA92539F61EC78917A971B6447ABE10C1477290BE35A115AECCFAB8C2F793DDCCDAD61E464B9AD6ECD1CA594C3B6EE1AA22FAF1CEC4185FE19FD68C2EFAC2E0B7007D4DACAC867681D6BB8BED3B6D8C023831FFE1B6D27DADF6EDF8122FC156A9AC994B23B3C3BF9814F6A557C78786C4F574BD35CE2EB3380F62B78CA29DC45CB3BE2968CBE63F06116280F3D3064ECB769BC2D072694E1A3127524442041107C2466CA324803E7B8F0E980B631E3CC53
1B9FB03D83099E805730E0DE84317D6C8FDC78E7368A23009920EA0FC8AD9D52907EAC6EB8360B2614D59AFE60F7D51098AB1B3D3E1813F6D37A2AC8F6C7B1F912552CEA6B83950C2796238C22B729CB490A935AE8F697A2003C5F23F316DA086E46F3399394748F4DAC0B26A4F1D8E2118EAA4EDD7FB94E1BDDB94D4937E951D2A231BD303549794C8BFB1F236BA62C687812045574751BF03445FCE4D569D7C38FD635F31B0A2AD39C696B2FADB04972C37E70D87616F4CE9C59225C753D48BF679609C9FC5BB5D0BE0EFE49411506D6638C59A5C884CFC8C390BE28F62F0C110F374D3D03786014A78ACC1A3726ABE531ABAF742D9DC6B2F68F26369D8F6DA23C98A68E2D8A07D0E6567650CC1B32618E5112F5A8126A4034FBBFC76D7A7D755DBE7E37DE198D7BB7A7D5975C5CEDC665032544588A15A9BA982BB0071E3A8974B02C0F33D4D8A36D3EE1D252FDDBF1C283F10CC650D1B596438E5E43BE289DB1C128103B069CA80DA00D72C9CA50D09EB07AFD399973538CDF82397E685A5C0E5408CF3D400C896BFB9407B8178912B6B4D4D9FEB9237C1875E73E8C158E49334A8D720AC9F0CC3FCE0908AFB1CCBBCE73989C13C0751C66C03E7EC5CBC681BBCC7EE29FB92BE46C8C70F6F614CDA75BC20F5F6C1FF3FA30FB2BCF538A27345C76ADED476BC25B14D9EB126C41D386597E7DB5D36CC9A905708FA00AE5E99C79DC9A166729E07404B28C41CCA88A00D3FD3011611200E24400AFA7DE2005990B309667EBCA5072FDE7991CB3909C7E4D1D5E5611EFE6463C73B666B5F16F3439653E2FF8BAA7F4769794D001837DB8346CF1615A0A964DD36BDBE944C6F44F62C177F2F74A7DCBCD4D296A40C7569EF50FAE3E088ABD5042049E2DAEF6920493D6FD9CD2FFFC1BA1DF25843F02BBE9468EECC510188CE38F35F5CE133864A587FDBB59EDB6250269E96E741F1ADEF87BCC1F35E09606D39C1A7B12B52D50D1750B2AB31C56410104BA5B3ADB1C6057FF01581D82885B5C0D0A03991848EA1B60266B4101F76F77668D684712AD656FBA63A4186563114ABC12BB3474DCAC17274A70784638489F17AECC924391C56F14C8FE4A7A7F00B3011478D005446C7D69F5D2F79F1AE6042FF5C440CBE52DCFEA0FA195E5F8663249C9B97080802688BA613352BCF61A5013B42C05275BA6865D2C7961583A9D27BF41BD7AA8CEF8A94EB69D9D6825F1F1370B6A7857188F9557C0FFD860FAE368809AC1238BD62266A286D9235C4757E39BBE9E7902902B2BB31A63D0DD119AD1E014F791D85236FFA673ABBBCD7AE11E25F243C61934A24F56E103601D2635EE81243432D8F108E57DAC989692347C10959FDB59C03C8C7BAA5ABCF15792C5A10517CE5FF57853FFAC3312BAED891522099935F7441FBCA6C23974ED42DB7C015C812FD834A44C
FE2FFF92E23E46B1AE8302365AC70F6EF5B4AFFBFCBB991EAC603899CD7769D750D10AF7BB3120271C0AC17DEA152D0118CB91FE5808D9A84907FACDC74CC6C478D15A4AAB07619070D3AC1B7126B5AAB22D6CBD8AB9960714BE9629F4FE3441F0E2388CE132C8864D26418E1EFDBBAFC1C4E62AEEB27F8A38D0915A4BA7843A8A51C2C00D3F1451F96C6487CBBEA74DB8BB61B0EB5463988D20C1FD81A05D16160A89F1461EE6502D97E7C7DEAB62078A8614C9158AB65821CAC8FE0D4D665686DE894F099E51E2CC16B2704316F6AAB552013AFE764170878E3C07805A9F50666DA5F3E7AF37196D1ABD3ED7D7A3DD8AFE2D56B6FD8FF6B77ECCD659086880B81206B1EC17DD19E807D992E733B097DC2384885F40D21765719AEE84E69F602CE9991ED03BA0E1653F7EACA2825FA2267BEA67B2A566F324792FE3E4A26872673E24D0DB6F92DBC787C42CDAFAEE825CDD33E4BD80AA41180E14F50885B7D920CDA432DFE90854FF20BFC7B7C7CD4AEFA1B2B5CA8147DBD24943DCBA3E302280411864AC18D0753090FC4EDBE72CC99CCBA63B114CA0E67D8FA34ADB674683F36CA614C57A54A18F7C467A599DE4B79202714C409A29FECF328471AD8594582CD2CB9F1F8BB3B54E5A8C3461D85D21F95BB213BC94BF428F89C16340A9CD3CAE2B54B75D4030AF58EE6F191AD465F9D491CEA5C8BB66CCB487A78599484EEF94E781C497AF38A07731E1164E90FEDAE6A68BB35F84C848CBD4491354107C0B2D78743B53D073094C29DDA82F8DCFCB19A4DECCB9CDDB5383F2E103D60BEA96A6AA03F147B2ACF5D77EBB7E5FFBE1C6450A823B1F2C3E7FC6976DB24DEDB0127780DAE79F3C7D631E669D29F680FC6067E91D4232442DAF322C3A2C2D0385CF2F1567109F098E8C3992F8F06A5111BB41D9F7C303441680CAB20D8464F9802BEF8942A75036BE194168B0F0AF855E227ECFEC921EA6780E6C824C8ABC5DF7703D84489F32CB048AA7C2FB80CE757831BF0F1A63BC5DD7190D03773D158B5790BAD7418F40FE0598477B9F7E860EAF407978FCAE8359ED2359371A3532CE002D7CDEFC59F664EB0AC7DD4D2E98AC07141E39158CCEC71D47A3BD7E31AE969C8E3CA86F99F77B478E68C4C7C5D6965BE42643DA852113FFBFB89BBEE6FD15FC98EA3C110E4F7DA92649B39C8A98CCFA6C5309ED40823665F9F8D3E4FC0D044532D5A7A6D62CB95E7113E48BEB43D8297FFBE9D47227C270B3D43B671697503E61E62551836FF7B7E9BF9DADE0AF1E88E6F35EFBBB409D8010787922F3ADFF92B27FD627CB26FD6EAAA1D5124705EC14DA5FD140DA6466714B45C2F0F098223A9A68DD58EF15AE6C85F5846FE285FBBF711030C1AED2C7487DF1FDE5624DBFB9F4263C833524F30D0244B5C852C7BB76AF84DCC9AACDDEA2A7742BDC9758B2DA46
3AF1C3B2FD7376EE705A41811A01D41120C3B2F953902682CCD7AEAE7061BE1B1AAC65AF78E681BACFB6B00BB982B50161FDA025F865E56F22F3D5773DE7299614093377FF8183BA97F07BEC2AE8109B23A930300662FEEB2C7E52465C9949EA8C82B9F294293BD084421C98E24934D42FA9117C8FE09713B7004AE17680A5D63C0F1BF70E198A58D05DA097F587C472BA699365D40B4BA9BEC451DDBBDFF4A3BCCCF3CD10785309731A2D06EAFF77FB3EADCE7E0D9E845C02D755A48EFD39CD40EDAD36342AA262A793DF7BCF9A4694E831008E61366B34E815E0442B4DF0927B6C358579BEC910E3F14B6562C2BFFE56D966A6CA4FD09AC57A1766AE50DC3E14012C090F501A45417E987EFE70FE8F275D6733107CFD8A2DB5AFD2B21926D7B49615B3CF46A5388AD3E1B47262B2E726055F044E9861D908D029702084D3A8370FBD8677EA1D8B186EE15E2CA3CD85F3B8B48B0E7E4F94250EF52A6028A6CB8B56DD15DC5CCD63CA
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 247 184 rc
2 182 m
74 182 l
74 164 l
2 164 l
h
2 182 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -52 236 cm
54 54 m
126 54 l
126 72 l
54 72 l
h
54 54 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 38 173 cm
/F1.1[ 16 0 0 -16 0 0]sf
-2.072 5.776001 m
(!)s
/Cs1 SC
1 1 1 sc
CM
2 164 m
74 164 l
74 146 l
2 146 l
h
2 164 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -52 236 cm
54 72 m
126 72 l
126 90 l
54 90 l
h
54 72 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 38 155 cm
-4.296 5.776001 m
(")s
/Cs1 SC
1 1 1 sc
CM
2 146 m
74 146 l
74 128 l
2 128 l
h
2 146 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -52 236 cm
54 90 m
126 90 l
126 108 l
54 108 l
h
54 90 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 38 137 cm
-4.296 5.776001 m
(#)s
/Cs1 SC
1 1 1 sc
CM
2 128 m
74 128 l
74 110 l
2 110 l
h
2 128 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -52 236 cm
54 108 m
126 108 l
126 126 l
54 126 l
h
54 108 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 38 119 cm
-8 5.776001 m
($)s
/Cs1 SC
1 1 1 sc
CM
2 110 m
74 110 l
74 92 l
2 92 l
h
2 110 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -52 236 cm
54 126 m
126 126 l
126 144 l
54 144 l
h
54 126 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 38 101 cm
-4.296 5.776001 m
(")s
/Cs1 SC
1 1 1 sc
CM
2 92 m
74 92 l
74 74 l
2 74 l
h
2 92 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -52 236 cm
54 144 m
126 144 l
126 162 l
54 162 l
h
54 144 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 38 83 cm
-2.664 5.776001 m
(%)s
/Cs1 SC
1 1 1 sc
CM
2 74 m
74 74 l
74 56 l
2 56 l
h
2 74 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -52 236 cm
54 162 m
126 162 l
126 180 l
54 180 l
h
54 162 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 38 65 cm
-4.296 5.776001 m
(#)s
/Cs1 SC
1 1 1 sc
CM
2 56 m
74 56 l
74 38 l
2 38 l
h
2 56 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -52 236 cm
54 180 m
126 180 l
126 198 l
54 198 l
h
54 180 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 38 47 cm
-4.296 5.776001 m
(&)s
/Cs1 SC
1 1 1 sc
CM
2 38 m
74 38 l
74 20 l
2 20 l
h
2 38 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -52 236 cm
54 198 m
126 198 l
126 216 l
54 216 l
h
54 198 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 38 29 cm
-6.8239999 5.776001 m
(')s
/Cs1 SC
1 1 1 sc
CM
173 182 m
245 182 l
245 164 l
173 164 l
h
173 182 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -52 236 cm
225 54 m
297 54 l
297 72 l
225 72 l
h
225 54 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 209 173 cm
-8.592 5.776001 m
(\(\)*)[ 4.144000 8.896000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
173 164 m
245 164 l
245 146 l
173 146 l
h
173 164 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -52 236 cm
225 72 m
297 72 l
297 90 l
225 90 l
h
225 72 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 209 155 cm
-8.592 5.776001 m
(\(+*)[ 4.144000 8.896000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
173 146 m
245 146 l
245 128 l
173 128 l
h
173 146 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -52 236 cm
225 90 m
297 90 l
297 108 l
225 108 l
h
225 90 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 209 137 cm
-8.592 5.776001 m
(\(,*)[ 4.144000 8.896000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
173 128 m
245 128 l
245 110 l
173 110 l
h
173 128 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -52 236 cm
225 108 m
297 108 l
297 126 l
225 126 l
h
225 108 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 209 119 cm
-8.592 5.776001 m
(\(-*)[ 4.144000 8.896000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
173 110 m
245 110 l
245 92 l
173 92 l
h
173 110 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -52 236 cm
225 126 m
297 126 l
297 144 l
225 144 l
h
225 126 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 209 101 cm
-8.592 5.776001 m
(\(.*)[ 4.144000 8.896000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
173 92 m
245 92 l
245 74 l
173 74 l
h
173 92 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -52 236 cm
225 144 m
297 144 l
297 162 l
225 162 l
h
225 144 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 209 83 cm
-8.592 5.776001 m
(\(/*)[ 4.144000 8.896000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
173 74 m
245 74 l
245 56 l
173 56 l
h
173 74 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -52 236 cm
225 162 m
297 162 l
297 180 l
225 180 l
h
225 162 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 209 65 cm
-8.592 5.776001 m
(\(0*)[ 4.144000 8.896000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
173 56 m
245 56 l
245 38 l
173 38 l
h
173 56 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -52 236 cm
225 180 m
297 180 l
297 198 l
225 198 l
h
225 180 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 209 47 cm
-8.592 5.776001 m
(\(1*)[ 4.144000 8.896000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
173 38 m
245 38 l
245 20 l
173 20 l
h
173 38 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -52 236 cm
225 198 m
297 198 l
297 216 l
225 216 l
h
225 198 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 209 29 cm
-8.592 5.776001 m
(\(2*)[ 4.144000 8.896000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -52 236 cm
135.89999 126 m
216.10001 126 l
S
0 i
CM
172.10001 110 m
164.10001 113 l
164.10001 107 l
h
172.10001 110 m
f
0 J
0 j
1 0 0 -1 -52 236 cm
224.10001 126 m
216.10001 123 l
216.10001 129 l
h
224.10001 126 m
S
CM
75.900002 110 m
83.900002 107 l
83.900002 113 l
h
75.900002 110 m
f
1 0 0 -1 -52 236 cm
127.9 126 m
135.89999 129 l
135.89999 123 l
h
127.9 126 m
S
1 1 1 sc
CM
2 20 m
74 20 l
74 2 l
2 2 l
h
2 20 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -52 236 cm
54 216 m
126 216 l
126 234 l
54 234 l
h
54 216 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 38 11 cm
-4 5.776001 m
(3)s
/Cs1 SC
1 1 1 sc
CM
173 20 m
245 20 l
245 2 l
173 2 l
h
173 20 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -52 236 cm
225 216 m
297 216 l
297 234 l
225 234 l
h
225 216 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 209 11 cm
-13.04 5.776001 m
(\(\)4*)[ 4.144000 8.896000 8.896000 0.000000 ] xS
ep
end
%%Trailer
%%EOF
