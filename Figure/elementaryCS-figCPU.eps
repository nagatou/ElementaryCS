%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 688.000000 337.000000
%APL_DSC_Encoding: UTF8
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 688 337
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 688 337
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /m put
dup 34 /a put
dup 35 /i put
dup 36 /n put
dup 37 /space put
dup 38 /e put
dup 39 /o put
dup 40 /r put
dup 41 /y put
dup 42 /A put
dup 43 /L put
dup 44 /U put
dup 45 /p put
dup 46 /g put
dup 47 /c put
dup 48 /u put
dup 49 /t put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<



0211002A00B7BA0003000000032BB8000310B8000DDC4103005F000D00015D4103008F000D00015D41030020000D00015D410300B0000D00015DB80010DCB80018DC4103008F001800015D4103005F001800015D41030020001800015D410300B0001800015DB8001BDCBA0023000D0010111239B8000310B80028D0B800282FBA002900000003111239B8001B10B8002CDC00B800012FB8000E2FB800192FBA0026000800032BB8002610B8000810B80013D0B8002610B80020D0303113113311343E0233321E0215113311343633321E0215113311342E02232206072E01232207233540550F2135251D25160955483F1F27160855192D3F2733551A104E306D3A020205FDFB01420F2D2A1E111F2A19FEAD01423C48121F2A18FEAD017B283924112E2A3028584C00000000010040000001EC021100170045BA0003000000032BB8000310BA000E000B00032BB8000E10B8000310B80015D0B800152FBA00160000000311123900B800012FB8000C2FBA0013000800032BB8001310303113113311343E0233321615113311342E022322072335405513263927313855112A44337335020205FDFB0124233B2C183830FEA201542A45321C5E520000020024FFF5021A02110013002700CBB800282FB800292FB8002810B80014D0B800142FB80000DC411B0006000000160000002600000036000000460000005600000066000000760000008600000096000000A6000000B6000000C60000000D5D410500D5000000E5000000025DB8002910B8001EDCB8000ADC410500DA000A00EA000A00025D411B0009000A0019000A0029000A0039000A0049000A0059000A0069000A0079000A0089000A0099000A00A9000A00B9000A00C9000A000D5D00BA000F001900032BB8000F10BA0023000500032BB8002310303113343E0233321E0215140E0223222E0227141E0233323E0235342E0223220E027E192C3B21213B2C19192C3B21213B2C195A20405E3D3E5D402020405D3E3D5E402001022F49321A1A32492F2F49311A1A31492F39624929294962393963492A2A4963000000020043FF3B022D02110018002C00ADB8002E2FBA0018000000032BB8001810B80002D0B8001810B80004D0B800042FB8002E10B8000EDCB8001810B80016D0B800162FB8000E10B80019DC410500DA001900EA001900025D411B0009001900190019002900190039001900490019005900190069001900790019008900190099001900A9001900B9001900C90019000D5DB8001810B80023D0B800232F00B800012FBA0013002800032BB8001310BA001E000900032BB8001E10303113113311331E0333323E0235342E0223220607233505140E0223222E0235343E0233321E024355020E292E2F133B593B1D1E3B593C365A1502013B10243B2C2C3E271211263C2B

01BA0002000200162B01BF0003003E0037002B001F00130000001C2B00BF0002004A0037002B001F00130000001C2B00BA00040004001B2BB8000120457D691844B8000A2BB800002B000000
00>] def
/CharStrings 19 dict dup begin
/.notdef 0 def
/space 1 def
/A 2 def
/L 3 def
/U 4 def
/a 5 def
/c 6 def
/e 7 def
/g 8 def
/i 9 def
/m 10 def
/n 11 def
/o 12 def
/p 13 def
/r 14 def
/t 15 def
/u 16 def
/y 17 def
/uni2B91 18 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4151493 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C91BD326F6E6A1837BE2706B92FCAA32341FE90C82594E2DAAEF640CEE11357769C8B8208A441E0F79686FD703A92173AFE0140C45DDCAE637EE7869B4139840004276DC12B30CBD85555D0D790F863E8349FA37B94FB0DF0B1F70D6067B0FE49326231AA87E271F2C161BC0C5CE008704552CE199E8D2347A2847DCAD75307B6930C8661A075707749D2678EC8070067DA04442D0741FC4904A40A49BF9271E5D709B1BCEF2E3A41FE56CF08934A24036C1EBD11B6C1234FC93B3EB1116CBEFC7A3643AAA5AE994B9E35500CADA6C0CF2AF7D5C0B31B0E3C44FC91E360CE62F33F64359132B78D5415B7C64938EBD4D177DD59F777929FC5EE24B011B3951D351CEE9C7C89DE14F3CDBB18276E4E7B82E0B210C103A943E44222F820DFBBAAA3978E9377E93575876729F8CC69890A92D385071D79EC7E2CB93EC5D207C885C788B5847473B638F1CD166C8F0DF55971BA0C2C897DB5B47F36DEB59E25E5C5EF5E39215E8FBC4431B9AACE8BCB89CE8D5C0E95123084AA0B89A66E84B11822E873EABCD1C419B4556234AB367DB335F00C7BC20002C555CBDFDF2DD6A1ACA122BBEA3F4FB068A54E865E15823E938AA3D892D76A82EE5D52F5C666B1154A8E656A02FC68D87A32F7E024D2261CD29CF31BEB51A7076F5C33913849E10ED121564D81469B4C83F772BE2CE877DCEC27340A6A38F9F1872548A08C1AEAA130BA55E93EE5F2097F3DD13F32E3E3B0CFB1F84EE6D90A0044E08B5A2DAD0CB20EAE93CB
A82A24103D44DC236FA980C1051C8E0C5C8E24D56A6870BF052ADD369782B60B2875729C1A3CB040DF23C97240DAFCFDF8CDE7843F3E508F1DA04904D8C2DD6E96F9B13E148F21690B5A9BCECCCA89F57816219FFD3EF1344B8D8B000AB457AF36653504BD13F6E6C0EFCEF5FBF7D7A45B7FFE02E52588DB6BDD268F20831B6E85389C2FC81F32110A39D9183F870518BD6D7A5557C0F679DD72AE90EA22F95AB5B0E8178EB11CDDBE217878C12720FE207E685FD56D9ABC271624E6C6DD8BEA8DD0AC6F533ECA08D7602E02F360B349C240E20AEF25F15AA6A490284A3645D148E69ABE1638009FF41462EDB101936D56E03C6586E4AB23CA7CA9609AB81BE6ECEB15108FC917AF426D6DEB55AFBFB632E968AA97DF751E5B60A06C256246D245E80CE547F2A9FD59177CAD1CE52A639B1F402559D150267D9270794EF4A4A124F95B66418EB579BA192B90D4AA1D2E666ABB3FDDC9E0C1B11A21550FB7F77610DED6BCCF9067DFC820C6EE45FCD3A37A1D4F89AB9338321DA41931A4EA1FABE7173836667D560388DF176DE37F5D353956E1920E49F51C88C5626B07FF4C69708E0E6D4883DB3E64ED86DF689152B24C712104C45A5D90A32A5223C99DA2AA660DFB80874DC796FF22AC37CF102182BF6FCFC84EBDD0159EB413176B3EEE0B635971F06E12F9154B9F5B3BBD7E1D396D9EA253C5BD0D5B041538234AEFBD9AE1CA4852CBB56F1D59C05BD3858D631164761C0439C83687DF655B94803713307DD4239F81058A534512A48A6B73D196639C6E57973653DA7E4E5DB029145E86866C6CCEDE86F8F5307B8121935D43EAD6E6932C9159159A0C777A0965C5F23DD064275F26D0A2BBDBC0D83920B0D9EBC37F027B28DD10B15F45053F71872E52A17DABCCCD94C34DE07475BF4878E18118E0D033DCE07CD7804287692FC179F0892CABBE9CE0553512DE6C0C1D09D4EB9C1D8267C0428EED56BC70CCAD21E39489664FCF058A271ED7AE71C404AEC034DF31F492C6A298418200806BA45720ECA22771BDB43DC2F5ACA7192A5375C72815EAC142C926B6AAF383F5714B2B953E13D4C17C7037AE55C9805E13C5549AD41D5CBECCA3DFFA5920B070B1679AD7591796E5C82FC530B89A59A64D7634CF3B441606DC391E03310C61D608F603676F6AEFEF78420A2BE10373DA270345A49FF8B5FEFFE8946BDB546DCD7CB6BBB5F70B18C35F875EA8D59659B09BD68FD7D43C380F072FCD058932ACCC3F66040A3D58A8DBF990D692728D02A065DA48F29D14A32E683E09F5330C2FA1B2AB0A6A0D29D8A4BA4ED5D1820B47D905C3C8C47E1E3FC5D973283837A78746869D614B348200D3F70B07E802C78779665785D4F363B0DBFB7B127713B84FA2B9BBE6D3B01D5D5D17CEB50E8CA90C90F6CAA4AAC4035FD79581968D210F4DAA60585761EF
1D796325826FC21F1967E5FB171FDB487AEF1831C7ACD1808A713316EB1A4048EC2369285FCBA962BFACBBD0661681B27DA138428519C7EFB30D6A2122AC8E892C19AC1CFC7BA0F00CF3D35DCB2CD796158F8CC40DC32B7184F52993D4DE3DD91971AC1538315A08707493DD39A2CF4ACAC3BC6D7706B7BAE42932647646CAD3FC85B7D5DCFDD87345950804DC333869F7716FA92D4A55010B723C911709D91810C1886AF4BBD87F68A19CD84F5E4E45EE91EF6BBDBD29A5CC35B646C427728843C4DF63E1B331BA61EEA75ACD938C53EB1E08A32C90029009862A6F496A6CE8D6BFB6EC47A6BDB2158A6DFB63E17E589F5D3D25F28CD278DAECFE1365CBAFDF0438AAC0AAC800F645B8305F927CDCC2B20E591423B0CF5BDA46B08BC5D3DF2D3167466CAADAF3C98DD0D9D25FC39143348332EEC186A4F3378F9B747162A1767FF4B1FB5DC3DB1215339D8FCF99118DF08D499C3281786AAE4017ECA5368FAC64151736EB7D4C44C842B2E4B907284FA328BEA0208AD16C39B8FEAA8A0590DAEAA3B2DC916005ADACE98CAB364646289CD39C9AE3E5D4135266C986EB727D4BCFE6C2EC633428E02013038E256D2ECF9664758495ACD27245079510B219394DC4673683B7067DE7ADE8F24C00F18FA5D4928199C205BC82D44EF69B0637B28FE2B6F66EA22A0E47DF8003CC0F3498422B02A48BEDE11CF9470FBE02EFEA68C35F63E9391DCBC819C399D1A493FE26985B2673397B4D762F2C501A16FDD329722C3794C7B870A1409EA9D99E54F441C3767A9504AB247E9FBEBDEA3E482AF8F5680C23109BC26C56253BE394CE54DB29817B327DEDBB40282B0525FE51AAF34AE14824239E54D90BF2C923D684183970C4E9C662D77DDBEE5637CCB5BD7DD46E0578487D460ED96164FF59256CA493C145B6DDEE8B79894B04519CB820B95E55F6E93A20044E2FE719612406C5CC755CC1CA453A8E07569F8EA51067D011269A6215D5941F4766E6327218F96CB5E7604AB44F7927A0E690201974D20D0AAFB258E312D6B13CF3061FBDC0E8BB6CC46ACBB7F3FB61F54A38EA03AE7E44242C9F28F5CEA90F82EC5286B54A59F04BB0473BB79ACAF8294DAC94656CEF6800B174B7C4354FC80042B9FA57EF07445DFDA126561FD7CD28DA51825BC6A23B994004F8D484633381BD96EB79CFB1E17DEF9CFC4B619383425150CCC2F60FD99536D013E4510B36DCC80049C39CD8B6FAA7F8F9FA723F97E71B1576A05C06204DCCCF46752A98971946F963E910F356FEF1D6148441C687775322895132FF8F2D802A00FD11AE1B27EEA8CCB3013A5F9DFF21913EA7ABF5D3412D8E5BFE7202247ACF0AFFB1D0F192903A15ED3D33EC9CB99A5F49E2F850E1AD72A3AA8C6F9EDA267BF8198EBC5AF81A6A34954D40B9C0698B852431C3EC3A8DE736069C8F6CC04B16
5D28DA16563A3EA35FD70B87E406172A4A964A3C781EA1C0D40518174D3001A9430B905ED84D0825AE45F8483859CBEABAFB95EC10EBE1C26CFC4CA9F1EF11D855FF992844D141B8F27107934939F5FB652272718B45809F6581C11CA6022D5C8900561A27F07EF7C543B5D6C8D80800B569A32BDCEB64513EED20BE3001D69A5B5C982C2C9C3FAA322A0412C2FCAC5A4531CEA75018127D026B6D4271E17589AB3943E0FDCEB7AE782979998A4874C06013A4C222A65F5087C3F3A140E8C97A5D1473ECE4A7C1900B4C2921232AAE4463A6B784EDFC48B706B900A230C2845648DC8E07F3DDF028C55B8E22800E6C879BB32F105228583E4D2D6E0B4DE0702D4A63DE427645F1127C0C8ED9760437B537D506C82E3EE666C60E30F222EB27682DEB210F5E36C5DFF9FFBF9E905CDA8D660CCF4DD595250166ED8573263D14D8CF8AF7E8DD05473E1A87C5796FF9CCD47DB757076DCB8A61FC7EF850A0DCE3F9A83FE62D0EDB2BDFE9ADE69638D2BB4C30A052B5A9D42957483EC96EAC12448F61DB9ACAEA1BEE1F71F4C528BB1F1C12F8A5E19FBD6E4284D3FDE47DC79908178773CEDD64235506D092CBF3921E28984E791B3CAAB829D10D275DEBD294DC5280D24240B4E90A504305F60E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
%RBIBeginFontSubset: Helvetica
%!FontType1-1.0: Helvetica 1.0000.0.0000
14 dict begin/FontName /Helvetica def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /r put
dup 34 /e put
dup 35 /g put
dup 36 /i put
dup 37 /s put
dup 38 /t put
dup 39 /n put
dup 40 /u put
dup 41 /c put
dup 42 /o put
dup 43 /d put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1947 1 index div -985 2 index div 2961 3 index div 2297 5 -1 roll div]cvx def
/sfnts [<


20457D691844B001602DB800322CB800312A2DB800332C4B20B003265358B0801BB040598A8A20B0032653582321B0C08A8A1B8A235920B0032653582321B801008A8A1B8A235920B0032653582321B801408A8A1B8A235920B80003265358B0032545B8018050582321B8018023211BB003254523212321591B2159442DB800342C4B535845441B2121592DB800352C4BB800095058B101018E59B801FF85B800441DB9000900035F5E2DB800362C2020456944B001602DB800372CB800362A212DB800382C2046B003254652582359208A208A49648A204620686164B004254620686164525823658A592F20B00053586920B000545821B040591B6920B000545821B0406559593A2DB800392C2046B00425465258238A592046206A6164B0042546206A61645258238A592FFD2DB8003A2C4B20B0032650585158B080441BB04044591B21212045B0C05058B0C0441B2159592DB8003B2C2020456944B001602020457D691844B001602DB8003C2CB8003B2A2DB8003D2C4B20B003265358B0801BB040598A8A20B0032653582321B0C08A8A1B8A235920B0032653582321B801008A8A1B8A235920B0032653582321B801408A8A1B8A235920B80003265358B0032545B8018050582321B8018023211BB003254523212321591B2159442DB8003E2C4B535845441B2121592DB8003F2C4BB800095058B101018E59B801FF85B800441DB9000900035F5E2DB800402C2020456944B001602DB800412CB800402A212DB800422C2046B003254652582359208A208A49648A204620686164B004254620686164525823658A592F20B00053586920B000545821B040591B6920B000545821B0406559593A2DB800432C2046B00425465258238A592046206A6164B0042546206A61645258238A592FFD2DB800442C4B20B0032650585158B080441BB04044591B21212045B0C05058B0C0441B2159592DB800452C2020456944B001602020457D691844B001602DB800462CB800452A2DB800472C4B20B003265358B0801BB040598A8A20B0032653582321B0C08A8A1B8A235920B0032653582321B801008A8A1B8A235920B0032653582321B801408A8A1B8A235920B80003265358B0032545B8018050582321B8018023211BB003254523212321591B2159442DB800482C4B535845441B2121592DB800492C4BB800095058B101018E59B801FF85B800441DB9000900035F5E2DB8004A2C2020456944B001602DB8004B2CB8004A2A212DB8004C2C2046B003254652582359208A208A49648A204620686164B004254620686164525823658A592F20B00053586920B000545821B040591B6920B000545821B0406559593A2DB8004D2C2046B00425465258238A592046206A6164B0042546206A61645258238A592FFD2DB8004E2C4B20B0032650585158





00>] def
/CharStrings 13 dict dup begin
/.notdef 0 def
/c 1 def
/d 2 def
/e 3 def
/g 4 def
/i 5 def
/n 6 def
/o 7 def
/r 8 def
/s 9 def
/t 10 def
/u 11 def
/u20B8 12 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-1947 -985 2961 2297}def
/UniqueID 4179358 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C91B71CCBEC8DADBFCB2CF6F614DCF0404E4678133CDA654CD39ADC4A8DD9DC9E199CA389B3097EA53D68A2728AA3C6C75ED53FA8420C021D872E28D46F54806A8A409E053FBF428B872BD7670370D1C6BC11C4F08B535F81FEC9405630C359AD72377BC9C439BF3E14639B510E57F413E309821F21BB70D19A90741E279C2CE88E72B46B6A5BE502E7C515D5B4B9545E714FC6733901084828CA61DDD78CE925D8A8B07FC09199462689EDE672812366601AABA83A0A56A7C2843DB4353D3734F0C3D45DF475F59D22CAE7C7541B6D01E9F066BFAAAB6285EE4417DFA59362CC9424ABFC4C426F58793A6C1823ADB80D7B5FF078D2A1AAC397C036AAB7100A1FB0379CE74AD471EB5BEDCC4BB2A14041032FCA261406314AD5E71A8A2B39B712B2A679408B0A59B89E2E58DDA27177FC0A6AFECC7E702C04359A2518F22A3F0EC48C3F3396EA35210FF71A0F2FD6463FABE611356267AC811D835816593E053F256865C0B00D49D29CF3723278A99D423A355D5859FB96015FBE8C119057622D1A104547AF92E0A03E1EB2CD8439FD35AD9863C40E8F41957EE81BC263D0256AC6E246D512C1924D420725716DA061F92BA152ED7E2605B707B9F34BCDFCCB0ADCE76B25D7507C55E08520C7618AF545C0999371D85D341B1FE3AF5A8CD5528029C9F1DD621239444395D5DE931920A9E6EAF8E50DB822557D6D696862A0AFA0F79D891E73916F8983A843D83BF1FEADB3AD758DB6045F1C2F1A651BF07891B4CD

6FFED5CD6A7407B99A2DFDAF2E752AE4ECCAD25A73FA3A11BC7E56F104D32AC5E81F03D36632AE0B34A1A4038AA27835982C897C2D364DEC40149A2C67F26C9C8F9B680E2C53CEC301E1876CC50FC853A490E4D04EDBE7BBDBC300697B686D64BCEFD6162F74444B595CCED639C1C9E7F02A67C8ABBCF138679959A0B91B442B6283944794708064C3FD2E52B9F7E2B632B13E9C827BAE836BDB5C2B88B34DE4413CE438AC92D4215089BCFB10D1C1FBDC1E461FC4FABBC75E5A2A5D883FAEE6A4762359E1D46E92652A8BC229B2CD9BA9C7279CC2FAC63C25D3E5F60865508445ECBF882B72E3527D6F3AE6FF7BC56EE551B388D36BB1CC7EC2F740E411AE8EC32E7CCFFA973925F5872D504BB02198283753F72C3984AEE243E91432B777A5D8386E7DB654EFC25F8B06378343D9C7778C1D4B84725FC6A232FF4D57E4717CECDFD6391D8E10E0A48C144FB0B2394554BBA6EF2A0CC7FF736DEF21BB414B11B54E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/Helvetica cguidfix
/F2.1/Helvetica renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 688 337 rc
-79 389 m
758 389 l
758 -413 l
-79 -413 l
h
-79 389 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -79 389 cm
603 153 m
702 153 l
702 369 l
603 369 l
h
603 153 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 573.5 128 cm
/F1.1[ 14 0 0 -14 0 0]sf
-42.672001 4.8040009 m
(!"#$%!&!'\(\))[ 11.942000 7.518000 3.108000 7.784000 3.892000 11.942000 7.518000 11.942000 8.036000 4.662000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -79 389 cm
189 189 m
196.875 234 l
244.125 234 l
252 189 l
231 189 l
228.375 211.5 l
212.625 211.5 l
210 189 l
h
189 189 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 141.5 177.5 cm
/F1.1[ 12 0 0 -12 0 0]sf
-11.556 14.664001 m
(*+,)[ 7.776000 6.672000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
227 65 m
308 65 l
308 29 l
227 29 l
h
227 65 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -79 389 cm
306 324 m
387 324 l
387 360 l
306 360 l
h
306 324 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 267.5 47 cm
/F2.1[ 12 0 0 -12 0 0]sf
-20.006836 4 m
(!"#$%&"!)[ 3.996094 6.673828 6.673828 2.666016 6.000000 3.333984 6.673828 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -79 389 cm
387 333 m
441 333 l
441 162 l
198 162 l
198 189 l
S
0 i
1 1 1 sc
CM
227 110 m
308 110 l
308 74 l
227 74 l
h
227 110 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -79 389 cm
306 279 m
387 279 l
387 315 l
306 315 l
h
306 279 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 267.5 92 cm
-20.006836 4 m
(!"#$%&"!)[ 3.996094 6.673828 6.673828 2.666016 6.000000 3.333984 6.673828 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
227 155 m
308 155 l
308 119 l
227 119 l
h
227 155 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -79 389 cm
306 234 m
387 234 l
387 270 l
306 270 l
h
306 234 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 267.5 137 cm
-20.006836 4 m
(!"#$%&"!)[ 3.996094 6.673828 6.673828 2.666016 6.000000 3.333984 6.673828 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
227 200 m
308 200 l
308 164 l
227 164 l
h
227 200 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -79 389 cm
306 189 m
387 189 l
387 225 l
306 225 l
h
306 189 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 267.5 182 cm
-20.006836 4 m
(!"#$%&"!)[ 3.996094 6.673828 6.673828 2.666016 6.000000 3.333984 6.673828 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -79 389 cm
387 351 m
414 351 l
414 173.5876 l
243 173.5876 l
243 189 l
S
387 288 m
441 288 l
S
387 244 m
441 243 l
S
387 200 m
441 199 l
S
387 306 m
414 305.48376 l
S
387 261 m
414 261 l
S
387 216 m
414 216 l
S
215.06606 234 m
215.06606 241 l
215.06606 342 l
225 342 l
270 342 l
270 207 l
299 207 l
306 207 l
S
266.48459 342 m
306 342 l
S
270 297 m
306 297 l
S
270 252 m
306 252 l
S
[
4
4
] 0 d
540 153 m
540 360 l
602.50012 361.41241 l
S
540 350 m
603 350 l
S
540 342 m
603 342 l
S
540 334 m
603 334 l
S
540 326 m
603 326 l
S
540 318 m
603 318 l
S
540 310 m
603 310 l
S
540 302 m
603 302 l
S
540 294 m
603 294 l
S
540 286 m
603 286 l
S
540 278 m
603 278 l
S
540 270 m
603 270 l
S
540 262 m
603 262 l
S
540 254 m
603 254 l
S
540 246 m
603 246 l
S
540 238 m
603 238 l
S
540 230 m
603 230 l
S
540 222 m
603 222 l
S
540 214 m
603 214 l
S
540 206 m
603 206 l
S
540 198 m
603 198 l
S
540 190 m
603 190 l
S
540 182 m
603 182 l
S
540 174 m
603 174 l
S
540 166 m
603 166 l
S
[] 0 d
90 117 m
90 387 l
765 387 l
765 162 l
702 162 l
S
702 357.58759 m
765 357.58759 l
S
702 349.58759 m
765 349.58759 l
S
702 341.58759 m
765 341.58759 l
S
702 333.58759 m
765 333.58759 l
S
702 325.58759 m
765 325.58759 l
S
702 317.58759 m
765 317.58759 l
S
702 309.58759 m
765 309.58759 l
S
702 301.58759 m
765 301.58759 l
S
702 293.58759 m
765 293.58759 l
S
702 285.58759 m
765 285.58759 l
S
702 277.58759 m
765 277.58759 l
S
702 269.58759 m
765 269.58759 l
S
702 261.58759 m
765 261.58759 l
S
702 253.5876 m
765 253.5876 l
S
702 245.5876 m
765 245.5876 l
S
702 237.5876 m
765 237.5876 l
S
702 229.5876 m
765 229.5876 l
S
702 221.5876 m
765 221.5876 l
S
702 213.5876 m
765 213.5876 l
S
702 205.5876 m
765 205.5876 l
S
702 197.5876 m
765 197.5876 l
S
702 189.5876 m
765 189.5876 l
S
702 181.5876 m
765 181.5876 l
S
702 173.5876 m
765 173.5876 l
S
0 i
1 1 1 sc
CM
2 299 m
92 299 l
92 272 l
2 272 l
h
2 299 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -79 389 cm
81 90 m
171 90 l
171 117 l
81 117 l
h
81 90 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 47 285.5 cm
-27.345703 4 m
($'%&!\(\)&$*')[ 2.666016 6.673828 6.000000 3.333984 3.996094 6.673828 6.000000 3.333984 2.666016 6.673828 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
434 272 m
488 272 l
488 236 l
434 236 l
h
434 272 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -79 389 cm
513 117 m
567 117 l
567 153 l
513 153 l
h
513 117 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 461 254 cm
-21.682617 4 m
(+"\)*+"!)[ 6.673828 6.673828 6.000000 6.673828 6.673828 6.673828 0.000000 ] xS
[
4
4
] 0 d
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -79 389 cm
144 117 m
144 135 l
513 135 l
S
0 i
1 1 1 sc
CM
20 191 m
74 191 l
74 155 l
20 155 l
h
20 191 m
f
[] 0 d
0.60000002 i
0 0 0 sc
1 0 0 -1 -79 389 cm
99 198 m
153 198 l
153 234 l
99 234 l
h
99 198 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 47 173 cm
-21.682617 4 m
(+"\)*+"!)[ 6.673828 6.673828 6.000000 6.673828 6.673828 6.673828 0.000000 ] xS
[
4
4
] 0 d
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -79 389 cm
126 117 m
126 198 l
S
153 216 m
193.82812 213.19141 l
S
126 234 m
126 369 l
468 369 l
468 162 l
513 153 l
S
0 i
1 1 1 sc
CM
101 335 m
200 335 l
200 299 l
101 299 l
h
101 335 m
f
[] 0 d
0.60000002 i
0 0 0 sc
1 0 0 -1 -79 389 cm
180 54 m
279 54 l
279 90 l
180 90 l
h
180 54 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 150.5 317 cm
/F1.1[ 12 0 0 -12 0 0]sf
-22.674 -3.3359985 m
(-\('.\("!)[ 7.116000 3.780000 6.888000 6.888000 3.996000 6.444000 0.000000 ] xS
-20.448 11 m
(/'0$1&\()[ 6.444000 6.888000 6.672000 6.672000 3.780000 6.444000 0.000000 ] xS
[
4
4
] 0 d
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -79 389 cm
279.5 72 m
540 72 l
540 117 l
S
[] 0 d
215.06606 341 m
216 387 l
S
ep
end
%%Trailer
%%EOF
