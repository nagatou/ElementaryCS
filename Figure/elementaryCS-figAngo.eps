%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 572.000000 80.000000
%APL_DSC_Encoding: UTF8
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 572 80
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 572 80
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin
/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255 {1 index exch/.notdef put} for
dup 33 /g put
dup 34 /o put
dup 35 /d put
dup 36 /m put
dup 37 /period put
dup 38 /e put
dup 39 /n put
dup 40 /c put
dup 41 /one put
dup 42 /zero put
dup 43 /three put
dup 44 /plus put
dup 45 /k put
dup 46 /six put
dup 47 /four put
dup 48 /j put
dup 49 /r put
dup 50 /b put
dup 51 /a put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<

206A61645258238A592FFD2DB800192C4B20B0032650585158B080441BB04044591B21212045B0C05058B0C0441B2159592DB8001A2C2020456944B001602020457D691844B001602DB8001B2CB8001A2A2DB8001C2C4B20B003265358B0401BB000598A8A20B0032653582321B0808A8A1B8A235920B0032653582321B800C08A8A1B8A235920B0032653582321B801008A8A1B8A235920B0032653582321B801408A8A1B8A235920B80003265358B0032545B8018050582321B8018023211BB003254523212321591B2159442DB8001D2C4B535845441B2121592D00020033000101CC02C8000300070061B800142BB800082FB800002FB8000810B80006D0B800062FB900020003F4B8000010B900040003F400B800014558B800042F1BB90004000A3E59B800014558B800052F1BB9000500043E59B8000410B900000002F4B8000510B900020002F4303101211121131121110199FECD013333FE67029AFD950299FD3902C7000100300000022801FA000B003FBA0001000200032BB8000110B8000210B80006D0B8000110B80008D000B800012FB800072FBA0004000500032BB8000410B80000D0B8000510B80009D03031013523152315331533353335014E44DADA44DA011FDBDB44DBDB4400010053000000C2006F0003001BBA0003000000032BB800031000BA0000000100032BB8000010303137153335536F6F6F6F00000002002AFFF5020202C50017003300CBB800342FB800352FB8003410B80018D0B800182FB80000DC411B0006000000160000002600000036000000460000005600000066000000760000008600000096000000A6000000B6000000C60000000D5D410500D5000000E5000000025DB8003510B80026DCB8000EDC410500DA000E00EA000E00025D411B0009000E0019000E0029000E0039000E0049000E0059000E0069000E0079000E0089000E0099000E00A9000E00B9000E00C9000E000D5D00BA0013001F00032BB8001310BA002D000700032BB8002D10303113343E0433321E0415140E0223222E0227141E0433323E0435342E0423220E0484010911213224243221110901051B3C36363C1B055A04101E344F37384E341E100404101E344F37374F341E1004015D1A3F3F3C2D1C1C2D3C3F3F1A2863573C3C57632727545047361F1F364750542727545048362020364850540000000100570000016402C5000A0023BA0001000900032BB800011000B800012FB800002FBA0007000800032BB800071030312111230E03231533110164410726374424B802C528341E0B44FE040001001DFFF501FE02C5003E0123BA0010001100032BB8001010BA001B000800032BB8001B10410500DA000800EA000800025D411B0009000800190008002900080039000800490008005900080069000800790008008900





00>] def
/CharStrings 21 dict dup begin
/.notdef 0 def
/plus 1 def
/period 2 def
/zero 3 def
/one 4 def
/three 5 def
/four 6 def
/six 7 def
/a 8 def
/b 9 def
/c 10 def
/d 11 def
/e 12 def
/g 13 def
/j 14 def
/k 15 def
/m 16 def
/n 17 def
/o 18 def
/r 19 def
/uni20BE 20 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] readonly def
/FontBBox {-951 -481 1987 1077} readonly def
/UniqueID 4445087 def
currentdict end
currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA55675454E59AEC12A68086DDD95476477C46AE143377694529C58844212FC811560E27EEE2CF00BCB281E3232AAAE39DD432AA1E5356738508FDA4147F2F61700BB68D9A15C4FEE98E02037088961D9429914384DDD24358DF578016E5CCE5FBB335D9483E0DC2BC4B85BD6E5B2917C00109AF4F678FCB42F967542C4A4D921FC4CA1E15C3B687F74E04414C465F3679AB4E08C90E38D33DE753072C1587E604C9B9D3EDE61AF824FF1A2253BB0A46A72F933C80A133682C85D64921DC8FAF364A3AEFD1B3B9276348E76C8D20F92F64C7663F913F5E93E84B3900ED96422986DEB1DD95BAB6F90EE6FA046AF6D1F7DE8E1E0B772DB2F0F8D025D7D5989695DC29E9FA60D7258CDB7BA2E19F6E98107645EA9124F8D8136A8CDE4946B1DE98894428EF92EE317EDB2B41E14FFE22D9A0FD81BDB7E1BFE06466875CB02827283FAEC1BB5BA0A1D3E37979CB17DDA82D153551281948D7EBBA5C41C5D019BDB57974FB6E5A185CDC1B26E26660F6FAF504A2FBD7CDBFC3AB3540C11DB0FF3FA6C6797393C56AC59DB98D1E4EE51854E739367EEBDCC677A87B4A214C0F302940F0269C2D1A05225BE2A2E4B7F84DB373E8CFB91777B7DE45F6CC14D4409DDF4648C725D71E6447988F180910A81785E904F81A9A66B7BD0A531CE47B00ECFD7A79836369E9EE5B5415A645F78E13073E363893B6D78D0EB7AE1B3443FC8CA45DD5D4D602DF3854AF2A428CD25C7418245AEFD58C441BE1AC6A8AB7895455F0F8B93781D913D9ED6912D9332FDD5E8CB124F9B88CDE3732A0E4B535EEF72707DB814A8ABD055C8FC0DA82098C6B93
18AE6BADCAB79537D5AD42A820BE45C5A8F2057B6AD2BA64F0BB64ED8035459FFCFA5B188DB20D86969EE77E777DAEBFB38F92D583496E9D2CBE5CE1F755A92958471A9F8A0B86EAA2F52C24D560D5CA5462E7FD9A3AA7441DEB404128E93CD51BE31E1AB142E78B104E30BE0E9153EFCFFB931B9C59221073A9784649E711D722766DBE5393242671DAD0119AFB6B3E48DBA01E9D3142B4FEE4208237B4132D839ED24B950AAC6722EDD29A228A5122066968FDFFFC8EF50DBCD66E1FBD42BBEEB482E588E46AAC1C8D77074A2A84BFB57EEFFBE79B0E064587E9D94C33C2EA1942A30E5B455C1942118D521843E9DC50028259F1ACF4227313704FA3F0E9444E63D29643AF62FDA05038324BCE4D9134989DCC2C34168314CF6864A063C7E4704A8CFA39A2FB77AFDF8C1CEB69233B26BF617E499220A31CD3AC356D7EA36FFC660AF9E4E475B0DE7E9AEF572A9408EAD9AAA3A51AC3E46BE552EB9B70F976264BF3CE0D1A120716E7AECA91496CA438BE8CC49BDF4D6309C4C3BC9A75D241F3CA6B47E4567C9A7E4FA38F2D792D3EAD06CA3F9C8BF92D46008A456E20755F6966A3424A58ACDF5313BE78732B476383C910C30F820E2298918BB4F8C4B8267487FD054F72ED64FAAF8352D0784D46C39729EEB94E6415245684F5CA51A55DD64B6D777465BBBA041CFF6E245AE41B1A02710CFFB0FCBDDF308D4DFB3331EF954DE12D172CFF89FE5BF80A8DA6D9D1D56173634800EA3C12D43D08D2F250E3A67C1A35471E0AE66CEF5A40C8BF7834C86C45475CE0B917442E6CBB09BE93F2B53C97BCF902C7E4C3E4CC0AE1669C9C4239FFCED155CB56D4B370229A3258D040D1EE7591E36DEC17ADBB85A8CC9477C0E5AE446C68D69887A561B2CFDBC79F7FA393E439225FF44E2FBEB4EDD908791EA4FAE797DBD7DB433333CC8CE8F4D9267310DB9A126042F6BC088BEF56BC5C10885C78F1893390269FFD46EF6D43126F2EE6DF3ED83731989A9EB98027B154E8F31B78CBF999E9D72D5D074A2C6CF643E82DC3BA3D2F2E739E849F349C2BD3E6C44B798CB0017178702DA3F6D2B879ACCDCE37020A806CCA9B486CF506E6474FE57771C8A77DED1ECC1AD37D57C48C2635030B361D42B1B406E28686AB9E8DB05970ACBD25E77C195A368197FC8688D71AD815B038370B4F89CA87798D27151066380D8ECD71BCDBE798FC6031C57CDC296A45D92031826AB1672F962ED3E2DF542C08624671EA55CF64C94FB6656F7A2C6D9A79AD55E1F7408F49C9A576D2CE895185A1017D69B774179B2967F2073D8557DABB4D705E2B868D7019EE168BA0A1D2C91116266DC68B844A7BA2D787BC12EAFE1720810F4A8CCA917D77270B5624BA6C51B838A7A80B00C992DB8A68C6854F0FAEDDE4E35C57D15608066BDF4F308DEEF0AC28CE01AD5DBA328AE515
B980F7932DA008A3DCDA2A73C48D2DA4283368E4C75F1D1F8E7EB0CE3A73A522C1F0DB9E0BB3E269DA348F7D156F32B749E53BEED646B7E579A69CF7F06628A779179293D5CE31AD4CDB4DBA64E602B9B7A47E9DD2F7B33B4BF94B4D75465619445E233CD0F9018EA593B1ADE165CB6ED5ECE9EDB0D8DC3D1078AADB826058805AA462C4F8C0101A90C25DF76B1435957000DE19EE55DB3708797F284AC3060C78A02AF805D2D854E1B652E22472D09177F68F4636A401D9098E9EB7B2FCB3FF00E4683198E2C28322A70ACCEEF36890DF3DB8CB92EE71B25283CEABD32EAA25EBC32F51750D5B52AE5F5168B9D380750D5A3D7073EEC144A70B1A863B9EC7642C7E61A68CF1AAE3FD5904FE3B62CA7D95689DB5E6D9C7021358BDB42AC31E73ED9755053502EBCFFCF7EE6C4FFCF2F66D4F2E0CCD36E9A3601EA915C149565C517591E83085B9651CA6E4AFE99ADFD65BF2796F1FA225607203D6A00FEB76F7E64B3823DE56279CE35ADB86250C1F78CB5BDF8E0BF619ECAAC92030FC2FD5EE1856F5588EA8565C4BB445968AF379F36CD33ACF7FC0B79188F1A18C6DA1EC02914745A3CE115FC50BCD092C784C7BD3831D4BC6CA12DA4F1F11C988494B0937733F667353E76FE7B7A95AFEB46D25FB1E2295ABFF3B8FB50271D7BF8E562395CA4FA9924055F46A9430B2038B448B1D89769073F0EB24984CB6D1F4C691F5A720BFBD2F99E63055D452A961F8AEA738222A261D2134EE246DFEAA24FDFE2F007C7008CA458D13930BF1173A28AB20865163746C64B87BF39B75A21CE804B3F443066F79A4569804114FF86DE522ECAB26EC7BF5071FDE0E5D31B8C63215981AF9CC5AD73B97089D585839E413885BA04BD13C289EF59ADF9A88FF00D6BC057A06452CF4F75B648F8DCCCB6B58D2B96D850B96D90F6348DE681CEE05161C4033C242CE9929FE6FAACDDC67B89562937B920DB8BF2C4947AC792E521665400405FB77B5E40DF8AE24E92FD3CC760C64206F0AEF194BA7707CE89A23C2089B7F47AA6174DEBD837A01A0BF6DA0281C014BEB940D744C75433B71807B8353233CCA1D3661CE0C5A5118261C2DB39540D26ADA7D18F2465AC06935CDA0A4FD7A5BF4E57BDC4A5D4833BC930A5B7E0896CF21F9602B5204F9F69D5298F155A888C03708E3719FB4C3F035FBF9B24A83CE385740AF0C3632578AD766C6745AD749818B2F64C23251C3FF0B3A2411EE485CD7530FE91715AE6F499417854950E74318359B864F9BC4CFB3DE07425A31570D06DA3686B229EEDC66D4780BB6237B1B47E16130AF48746164547D476A9652BFB2322FBE116AA2A44A925778DFF7A35E6F7E77FC1F2E044D0F01927CDE502A99016CBB9A4B949BB763DE3FDDBFE97D8EF7CB7197754F28D5226F2845E320296F04401A76979A06212DCA862CF6853E2A9335


0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 572 80 rc
39 74 m
111 74 l
111 56 l
39 56 l
h
39 74 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -24 146 cm
63 72 m
135 72 l
135 90 l
63 90 l
h
63 72 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 75 65 cm
/F1.1[ 16 0 0 -16 0 0]sf
-4.592 5.776001 m
(!)s
/Cs1 SC
1 1 1 sc
CM
39 56 m
111 56 l
111 38 l
39 38 l
h
39 56 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -24 146 cm
63 90 m
135 90 l
135 108 l
63 108 l
h
63 90 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 75 47 cm
-4.592 5.776001 m
(")s
/Cs1 SC
1 1 1 sc
CM
39 38 m
111 38 l
111 20 l
39 20 l
h
39 38 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -24 146 cm
63 108 m
135 108 l
135 126 l
63 126 l
h
63 108 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 75 29 cm
-4.592 5.776001 m
(")s
/Cs1 SC
1 1 1 sc
CM
39 20 m
111 20 l
111 2 l
39 2 l
h
39 20 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -24 146 cm
63 126 m
135 126 l
135 144 l
63 144 l
h
63 126 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 75 11 cm
-4.744 5.776001 m
(#)s
1 0 0 -1 12.0625 65 cm
-6.8239999 5.776001 m
($)s
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -24 146 cm
48.0625 81 m
53.099998 81 l
S
0 i
CM
37.099998 65 m
29.1 68 l
29.1 62 l
h
37.099998 65 m
f
0 J
0 j
1 0 0 -1 -24 146 cm
61.099998 81 m
53.099998 78 l
53.099998 84 l
h
61.099998 81 m
S
/Cs2 SC
0 sc
1 0 0 -1 156 50 cm
-35.720001 5.776001 m
($%&'\("#&)[ 13.648000 4.448000 8.592000 8.896000 8.592000 9.184000 9.488000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
201 74 m
273 74 l
273 56 l
201 56 l
h
201 74 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -24 146 cm
225 72 m
297 72 l
297 90 l
225 90 l
h
225 72 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 237 65 cm
-13.344 5.776001 m
(\)*+)[ 8.896000 8.896000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
201 56 m
273 56 l
273 38 l
201 38 l
h
201 56 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -24 146 cm
225 90 m
297 90 l
297 108 l
225 108 l
h
225 90 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 237 47 cm
-13.344 5.776001 m
(\)\)\))[ 8.896000 8.896000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
201 38 m
273 38 l
273 20 l
201 20 l
h
201 38 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -24 146 cm
225 108 m
297 108 l
297 126 l
225 126 l
h
225 108 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 237 29 cm
-13.344 5.776001 m
(\)\)\))[ 8.896000 8.896000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
201 20 m
273 20 l
273 2 l
201 2 l
h
201 20 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -24 146 cm
225 126 m
297 126 l
297 144 l
225 144 l
h
225 126 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 237 11 cm
-13.344 5.776001 m
(\)**)[ 8.896000 8.896000 0.000000 ] xS
4 w
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -24 146 cm
135 117 m
206.10001 117 l
S
0 i
CM
194.89999 29 m
182.10001 33.799999 l
182.10001 24.200001 l
h
194.89999 29 m
f
0 J
0 j
1 0 0 -1 -24 146 cm
218.89999 117 m
206.10001 112.2 l
206.10001 121.8 l
h
218.89999 117 m
S
/Cs2 SC
0 sc
1 0 0 -1 300 50 cm
-8.9519997 5.776001 m
(,-)[ 9.600000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
336 74 m
408 74 l
408 56 l
336 56 l
h
336 74 m
f
1 w
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -24 146 cm
360 72 m
432 72 l
432 90 l
360 90 l
h
360 72 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 372 65 cm
-13.344 5.776001 m
(\)*.)[ 8.896000 8.896000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
336 56 m
408 56 l
408 38 l
336 38 l
h
336 56 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -24 146 cm
360 90 m
432 90 l
432 108 l
360 108 l
h
360 90 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 372 47 cm
-13.344 5.776001 m
(\)\)/)[ 8.896000 8.896000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
336 38 m
408 38 l
408 20 l
336 20 l
h
336 38 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -24 146 cm
360 108 m
432 108 l
432 126 l
360 126 l
h
360 108 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 372 29 cm
-13.344 5.776001 m
(\)\)/)[ 8.896000 8.896000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
336 20 m
408 20 l
408 2 l
336 2 l
h
336 20 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -24 146 cm
360 126 m
432 126 l
432 144 l
360 144 l
h
360 126 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 372 11 cm
-13.344 5.776001 m
(\)*+)[ 8.896000 8.896000 0.000000 ] xS
4 w
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -24 146 cm
297 117 m
341.10001 117 l
S
0 i
CM
329.89999 29 m
317.10001 33.799999 l
317.10001 24.200001 l
h
329.89999 29 m
f
0 J
0 j
1 0 0 -1 -24 146 cm
353.89999 117 m
341.10001 112.2 l
341.10001 121.8 l
h
353.89999 117 m
S
1 1 1 sc
CM
498 74 m
570 74 l
570 56 l
498 56 l
h
498 74 m
f
1 w
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -24 146 cm
522 72 m
594 72 l
594 90 l
522 90 l
h
522 72 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 534 65 cm
-1.776 5.776001 m
(0)s
/Cs1 SC
1 1 1 sc
CM
498 56 m
570 56 l
570 38 l
498 38 l
h
498 56 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -24 146 cm
522 90 m
594 90 l
594 108 l
522 108 l
h
522 90 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 534 47 cm
-2.664 5.776001 m
(1)s
/Cs1 SC
1 1 1 sc
CM
498 38 m
570 38 l
570 20 l
498 20 l
h
498 38 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -24 146 cm
522 108 m
594 108 l
594 126 l
522 126 l
h
522 108 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 534 29 cm
-2.664 5.776001 m
(1)s
/Cs1 SC
1 1 1 sc
CM
498 20 m
570 20 l
570 2 l
498 2 l
h
498 20 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -24 146 cm
522 126 m
594 126 l
594 144 l
522 144 l
h
522 126 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 534 11 cm
-4.592 5.776001 m
(!)s
1 0 0 -1 453.0625 47 cm
-33.936001 5.776001 m
(2%#&\("#&)[ 9.488000 4.448000 9.488000 8.592000 8.592000 9.184000 9.488000 0.000000 ] xS
1 0 0 -1 174.0625 65 cm
-4.296 5.776001 m
(3)s
1 0 0 -1 309.0625 65 cm
-4.744 5.776001 m
(2)s
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -24 146 cm
207.5625 81 m
215.10001 81 l
S
0 i
CM
199.10001 65 m
191.10001 68 l
191.10001 62 l
h
199.10001 65 m
f
0 J
0 j
1 0 0 -1 -24 146 cm
223.10001 81 m
215.10001 78 l
215.10001 84 l
h
223.10001 81 m
S
1 J
1 j
0.60000002 i
343.0625 81 m
350.10001 81 l
S
0 i
CM
334.10001 65 m
326.10001 68 l
326.10001 62 l
h
334.10001 65 m
f
0 J
0 j
1 0 0 -1 -24 146 cm
358.10001 81 m
350.10001 78 l
350.10001 84 l
h
358.10001 81 m
S
3 w
1 J
1 j
0.60000002 i
432 117 m
506.10001 117 l
S
0 i
CM
493.29999 29 m
482.10001 33.200001 l
482.10001 24.799999 l
h
493.29999 29 m
f
0 J
0 j
1 0 0 -1 -24 146 cm
517.29999 117 m
506.10001 112.8 l
506.10001 121.2 l
h
517.29999 117 m
S
/Cs2 SC
0 sc
1 0 0 -1 471.0625 65 cm
-4.296 5.776001 m
(\()s
1 w
1 J
1 j
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -24 146 cm
504.5625 81 m
512.09998 81 l
S
0 i
CM
496.10001 65 m
488.10001 68 l
488.10001 62 l
h
496.10001 65 m
f
0 J
0 j
1 0 0 -1 -24 146 cm
520.09998 81 m
512.09998 78 l
512.09998 84 l
h
520.09998 81 m
S
ep
end
%%Trailer
%%EOF
