%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 337.000000 265.000000
%APL_DSC_Encoding: UTF8
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 337 265
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 337 265
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin
/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255 {1 index exch/.notdef put} for
dup 33 /five put
dup 34 /three put
dup 35 /zero put
dup 36 /one put
dup 37 /two put
dup 38 /four put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<



0000000701F40033022C002A022C0057022C0018022C001D022C001C022C00230000004800F4011A01A2028802CE03660001000000070096000900680004000200000000001E00000200042800030001B800142B01BA0002000200162B01BF0003003E0037002B001F00130000001C2B00BF0002004A0037002B001F00130000001C2B00BA00040004001B2BB8000120457D691844B8000A2BB800002B000000
00>] def
/CharStrings 7 dict dup begin
/.notdef 0 def
/zero 1 def
/one 2 def
/two 3 def
/three 4 def
/four 5 def
/five 6 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] readonly def
/FontBBox {-951 -481 1987 1077} readonly def
/UniqueID 4203806 def
currentdict end
currentfile eexec


0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 337 265 rc
149.72791 257.72791 m
156.75737 250.69847 156.75737 239.30153 149.72791 232.27209 c
142.69847 225.24263 131.30153 225.24263 124.27209 232.27209 c
117.24262 239.30153 117.24262 250.69847 124.27209 257.72791 c
131.30153 264.75739 142.69847 264.75739 149.72791 257.72791 c
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -97 344 cm
246.72791 86.272095 m
253.75737 93.301521 253.75737 104.69848 246.72791 111.72791 c
239.69847 118.75738 228.30153 118.75738 221.27209 111.72791 c
214.24263 104.69848 214.24263 93.301521 221.27209 86.272095 c
228.30153 79.242622 239.69847 79.242622 246.72791 86.272095 c
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 137 245 cm
/F1.1[ 16 0 0 -16 0 0]sf
-4.448 5.776001 m
(!)s
/Cs1 SC
1 1 1 sc
CM
68.727905 212.72791 m
75.757378 205.69847 75.757378 194.30153 68.727905 187.27209 c
61.698475 180.24263 50.301525 180.24263 43.272091 187.27209 c
36.242622 194.30153 36.242622 205.69847 43.272091 212.72791 c
50.301525 219.75737 61.698475 219.75737 68.727905 212.72791 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -97 344 cm
165.72791 131.27209 m
172.75737 138.30153 172.75737 149.69847 165.72791 156.72791 c
158.69847 163.75737 147.30153 163.75737 140.27209 156.72791 c
133.24263 149.69847 133.24263 138.30153 140.27209 131.27209 c
147.30153 124.24262 158.69847 124.24262 165.72791 131.27209 c
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 56 200 cm
-4.448 5.776001 m
(")s
/Cs1 SC
1 1 1 sc
CM
167.72791 95.727905 m
174.75737 88.698479 174.75737 77.301521 167.72791 70.272095 c
160.69847 63.242622 149.30153 63.242622 142.27209 70.272095 c
135.24263 77.301521 135.24263 88.698479 142.27209 95.727905 c
149.30153 102.75738 160.69847 102.75738 167.72791 95.727905 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -97 344 cm
264.72791 248.27209 m
271.75739 255.30153 271.75739 266.69849 264.72791 273.72791 c
257.69849 280.75739 246.30153 280.75739 239.27209 273.72791 c
232.24263 266.69849 232.24263 255.30153 239.27209 248.27209 c
246.30153 241.24263 257.69849 241.24263 264.72791 248.27209 c
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 155 83 cm
-4.448 5.776001 m
(#)s
/Cs1 SC
1 1 1 sc
CM
212.72791 95.727905 m
219.75737 88.698479 219.75737 77.301521 212.72791 70.272095 c
205.69847 63.242622 194.30153 63.242622 187.27209 70.272095 c
180.24263 77.301521 180.24263 88.698479 187.27209 95.727905 c
194.30153 102.75738 205.69847 102.75738 212.72791 95.727905 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -97 344 cm
309.72791 248.27209 m
316.75739 255.30153 316.75739 266.69849 309.72791 273.72791 c
302.69849 280.75739 291.30151 280.75739 284.27209 273.72791 c
277.24261 266.69849 277.24261 255.30153 284.27209 248.27209 c
291.30151 241.24263 302.69849 241.24263 309.72791 248.27209 c
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 200 83 cm
-4.448 5.776001 m
($)s
/Cs1 SC
1 1 1 sc
CM
185.72791 158.72791 m
192.75737 151.69847 192.75737 140.30153 185.72791 133.27209 c
178.69847 126.24262 167.30153 126.24262 160.27209 133.27209 c
153.24263 140.30153 153.24263 151.69847 160.27209 158.72791 c
167.30153 165.75737 178.69847 165.75737 185.72791 158.72791 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -97 344 cm
282.72791 185.27209 m
289.75739 192.30153 289.75739 203.69847 282.72791 210.72791 c
275.69849 217.75737 264.30151 217.75737 257.27209 210.72791 c
250.24263 203.69847 250.24263 192.30153 257.27209 185.27209 c
264.30151 178.24263 275.69849 178.24263 282.72791 185.27209 c
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 173 146 cm
-4.448 5.776001 m
(%)s
/Cs1 SC
1 1 1 sc
CM
230.72791 212.72791 m
237.75737 205.69847 237.75737 194.30153 230.72791 187.27209 c
223.69847 180.24263 212.30153 180.24263 205.27209 187.27209 c
198.24263 194.30153 198.24263 205.69847 205.27209 212.72791 c
212.30153 219.75737 223.69847 219.75737 230.72791 212.72791 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -97 344 cm
327.72791 131.27209 m
334.75739 138.30153 334.75739 149.69847 327.72791 156.72791 c
320.69849 163.75737 309.30151 163.75737 302.27209 156.72791 c
295.24261 149.69847 295.24261 138.30153 302.27209 131.27209 c
309.30151 124.24262 320.69849 124.24262 327.72791 131.27209 c
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 218 200 cm
-4.448 5.776001 m
(&)s
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -97 344 cm
256.94589 243.68942 m
262.33438 224.82967 l
S
0 i
CM
167.53215 126.86253 m
162.44981 119.9945 l
168.21895 118.34617 l
h
167.53215 126.86253 m
f
0 J
0 j
1 0 0 -1 -97 344 cm
264.53214 217.13748 m
259.4498 224.00551 l
265.21896 225.65382 l
h
264.53214 217.13748 m
S
1 J
1 j
0.60000002 i
289.90756 244.45099 m
280.99225 223.64854 l
S
0 i
CM
180.84088 127.70461 m
181.2348 119.16969 l
186.74966 121.53321 l
h
180.84088 127.70461 m
f
0 J
0 j
1 0 0 -1 -97 344 cm
277.84088 216.29538 m
278.2348 224.83031 l
283.74966 222.46678 l
h
277.84088 216.29538 m
S
1 J
1 j
0.60000002 i
168.73888 135.25618 m
209.60696 112.55168 l
S
0 i
CM
119.60023 235.33347 m
111.15004 234.07079 l
114.0639 228.82584 l
h
119.60023 235.33347 m
f
0 J
0 j
1 0 0 -1 -97 344 cm
216.60022 108.66654 m
208.15004 109.92921 l
211.0639 115.17416 l
h
216.60022 108.66654 m
S
1 J
1 j
0.60000002 i
299.26114 135.25618 m
258.39304 112.55168 l
S
0 i
CM
154.39978 235.33347 m
159.9361 228.82584 l
162.84996 234.07079 l
h
154.39978 235.33347 m
f
0 J
0 j
1 0 0 -1 -97 344 cm
251.39978 108.66654 m
256.9361 115.17416 l
259.84998 109.92921 l
h
251.39978 108.66654 m
S
1 1 1 sc
CM
77.727905 95.727905 m
84.757378 88.698479 84.757378 77.301521 77.727905 70.272095 c
70.698479 63.242622 59.301525 63.242622 52.272091 70.272095 c
45.242622 77.301521 45.242622 88.698479 52.272091 95.727905 c
59.301525 102.75738 70.698479 102.75738 77.727905 95.727905 c
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -97 344 cm
174.72791 248.27209 m
181.75737 255.30153 181.75737 266.69849 174.72791 273.72791 c
167.69847 280.75739 156.30153 280.75739 149.27209 273.72791 c
142.24263 266.69849 142.24263 255.30153 149.27209 248.27209 c
156.30153 241.24263 167.69847 241.24263 174.72791 248.27209 c
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 65 83 cm
-4.448 5.776001 m
(#)s
/Cs1 SC
1 1 1 sc
CM
32.727909 158.72791 m
39.757378 151.69847 39.757378 140.30153 32.727909 133.27209 c
25.698477 126.24262 14.301524 126.24262 7.2720919 133.27209 c
0.242624 140.30153 0.242624 151.69847 7.2720919 158.72791 c
14.301524 165.75737 25.698477 165.75737 32.727909 158.72791 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -97 344 cm
129.72791 185.27209 m
136.75737 192.30153 136.75737 203.69847 129.72791 210.72791 c
122.69848 217.75737 111.30152 217.75737 104.27209 210.72791 c
97.242622 203.69847 97.242622 192.30153 104.27209 185.27209 c
111.30152 178.24263 122.69848 178.24263 129.72791 185.27209 c
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 20 146 cm
-4.448 5.776001 m
($)s
/Cs1 SC
1 1 1 sc
CM
104.72791 158.72791 m
111.75738 151.69847 111.75738 140.30153 104.72791 133.27209 c
97.698479 126.24262 86.301521 126.24262 79.272095 133.27209 c
72.242622 140.30153 72.242622 151.69847 79.272095 158.72791 c
86.301521 165.75737 97.698479 165.75737 104.72791 158.72791 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -97 344 cm
201.72791 185.27209 m
208.75737 192.30153 208.75737 203.69847 201.72791 210.72791 c
194.69847 217.75737 183.30153 217.75737 176.27209 210.72791 c
169.24263 203.69847 169.24263 192.30153 176.27209 185.27209 c
183.30153 178.24263 194.69847 178.24263 201.72791 185.27209 c
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 92 146 cm
-4.448 5.776001 m
(%)s
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -97 344 cm
169.09244 244.45099 m
178.00777 223.64854 l
S
0 i
CM
84.159119 127.70461 m
78.250328 121.53321 l
83.765198 119.16969 l
h
84.159119 127.70461 m
f
0 J
0 j
1 0 0 -1 -97 344 cm
181.15912 216.29538 m
175.25034 222.46678 l
180.7652 224.83031 l
h
181.15912 216.29538 m
S
1 J
1 j
0.60000002 i
179.01349 183.02022 m
168.47804 167.21707 l
S
0 i
CM
67.040451 183.43933 m
68.981895 175.11882 l
73.974197 178.44702 l
h
67.040451 183.43933 m
f
0 J
0 j
1 0 0 -1 -97 344 cm
164.04045 160.56067 m
165.9819 168.88118 l
170.9742 165.55298 l
h
164.04045 160.56067 m
S
1 J
1 j
0.60000002 i
126.98652 183.02022 m
137.52196 167.21707 l
S
0 i
CM
44.959553 183.43933 m
38.025799 178.44702 l
43.018101 175.11882 l
h
44.959553 183.43933 m
f
0 J
0 j
1 0 0 -1 -97 344 cm
141.95955 160.56067 m
135.0258 165.55298 l
140.0181 168.88118 l
h
141.95955 160.56067 m
S
1 1 1 sc
CM
122.72791 95.727905 m
129.75737 88.698479 129.75737 77.301521 122.72791 70.272095 c
115.69848 63.242622 104.30152 63.242622 97.272095 70.272095 c
90.242622 77.301521 90.242622 88.698479 97.272095 95.727905 c
104.30152 102.75738 115.69848 102.75738 122.72791 95.727905 c
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -97 344 cm
219.72791 248.27209 m
226.75737 255.30153 226.75737 266.69849 219.72791 273.72791 c
212.69847 280.75739 201.30153 280.75739 194.27209 273.72791 c
187.24263 266.69849 187.24263 255.30153 194.27209 248.27209 c
201.30153 241.24263 212.69847 241.24263 219.72791 248.27209 c
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 110 83 cm
-4.448 5.776001 m
($)s
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -97 344 cm
202.05412 243.68942 m
196.66562 224.82967 l
S
0 i
CM
97.46785 126.86253 m
96.781044 118.34617 l
102.55019 119.9945 l
h
97.46785 126.86253 m
f
0 J
0 j
1 0 0 -1 -97 344 cm
194.46785 217.13748 m
193.78105 225.65382 l
199.55019 224.00551 l
h
194.46785 217.13748 m
S
1 1 1 sc
CM
275.72791 32.727909 m
282.75739 25.698477 282.75739 14.301524 275.72791 7.2720919 c
268.69849 0.242624 257.30151 0.242624 250.27209 7.2720919 c
243.24263 14.301524 243.24263 25.698477 250.27209 32.727909 c
257.30151 39.757378 268.69849 39.757378 275.72791 32.727909 c
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -97 344 cm
372.72791 311.27209 m
379.75739 318.30151 379.75739 329.69849 372.72791 336.72791 c
365.69849 343.75739 354.30151 343.75739 347.27209 336.72791 c
340.24261 329.69849 340.24261 318.30151 347.27209 311.27209 c
354.30151 304.24261 365.69849 304.24261 372.72791 311.27209 c
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 263 20 cm
-4.448 5.776001 m
(#)s
/Cs1 SC
1 1 1 sc
CM
257.72791 95.727905 m
264.75739 88.698479 264.75739 77.301521 257.72791 70.272095 c
250.69847 63.242622 239.30153 63.242622 232.27209 70.272095 c
225.24263 77.301521 225.24263 88.698479 232.27209 95.727905 c
239.30153 102.75738 250.69847 102.75738 257.72791 95.727905 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -97 344 cm
354.72791 248.27209 m
361.75739 255.30153 361.75739 266.69849 354.72791 273.72791 c
347.69849 280.75739 336.30151 280.75739 329.27209 273.72791 c
322.24261 266.69849 322.24261 255.30153 329.27209 248.27209 c
336.30151 241.24263 347.69849 241.24263 354.72791 248.27209 c
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 245 83 cm
-4.448 5.776001 m
($)s
/Cs1 SC
1 1 1 sc
CM
302.72791 95.727905 m
309.75739 88.698479 309.75739 77.301521 302.72791 70.272095 c
295.69849 63.242622 284.30151 63.242622 277.27209 70.272095 c
270.24261 77.301521 270.24261 88.698479 277.27209 95.727905 c
284.30151 102.75738 295.69849 102.75738 302.72791 95.727905 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -97 344 cm
399.72791 248.27209 m
406.75739 255.30153 406.75739 266.69849 399.72791 273.72791 c
392.69849 280.75739 381.30151 280.75739 374.27209 273.72791 c
367.24261 266.69849 367.24261 255.30153 374.27209 248.27209 c
381.30151 241.24263 392.69849 241.24263 399.72791 248.27209 c
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 290 83 cm
-4.448 5.776001 m
(%)s
/Cs1 SC
1 1 1 sc
CM
284.72791 158.72791 m
291.75739 151.69847 291.75739 140.30153 284.72791 133.27209 c
277.69849 126.24262 266.30151 126.24262 259.27209 133.27209 c
252.24263 140.30153 252.24263 151.69847 259.27209 158.72791 c
266.30151 165.75737 277.69849 165.75737 284.72791 158.72791 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -97 344 cm
381.72791 185.27209 m
388.75739 192.30153 388.75739 203.69847 381.72791 210.72791 c
374.69849 217.75737 363.30151 217.75737 356.27209 210.72791 c
349.24261 203.69847 349.24261 192.30153 356.27209 185.27209 c
363.30151 178.24263 374.69849 178.24263 381.72791 185.27209 c
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 272 146 cm
-4.448 5.776001 m
(")s
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -97 344 cm
367.09244 307.45099 m
376.00775 286.64856 l
S
0 i
CM
282.15912 64.704613 m
276.25034 58.533211 l
281.7652 56.169697 l
h
282.15912 64.704613 m
f
0 J
0 j
1 0 0 -1 -97 344 cm
379.15912 279.29538 m
373.25034 285.4668 l
378.7652 287.83029 l
h
379.15912 279.29538 m
S
1 J
1 j
0.60000002 i
382.05411 243.68942 m
376.66562 224.82967 l
S
0 i
CM
277.46786 126.86253 m
276.78104 118.34617 l
282.5502 119.9945 l
h
277.46786 126.86253 m
f
0 J
0 j
1 0 0 -1 -97 344 cm
374.46786 217.13748 m
373.78104 225.65382 l
379.5502 224.00551 l
h
374.46786 217.13748 m
S
1 J
1 j
0.60000002 i
349.09244 244.45099 m
358.00775 223.64854 l
S
0 i
CM
264.15912 127.70461 m
258.25034 121.53321 l
263.7652 119.16969 l
h
264.15912 127.70461 m
f
0 J
0 j
1 0 0 -1 -97 344 cm
361.15912 216.29538 m
355.25034 222.46678 l
360.7652 224.83031 l
h
361.15912 216.29538 m
S
1 J
1 j
0.60000002 i
281.52405 184.17116 m
297.13812 165.43423 l
S
0 i
CM
205.25961 184.71153 m
197.83347 180.48631 l
202.44279 176.6452 l
h
205.25961 184.71153 m
f
0 J
0 j
1 0 0 -1 -97 344 cm
302.25961 159.28847 m
294.83347 163.51369 l
299.44281 167.3548 l
h
302.25961 159.28847 m
S
1 J
1 j
0.60000002 i
356.27209 185.27209 m
334.72827 163.72827 l
S
0 i
CM
232.07141 185.92859 m
235.60695 178.15042 l
239.84958 182.39305 l
h
232.07141 185.92859 m
f
0 J
0 j
1 0 0 -1 -97 344 cm
329.07141 158.07141 m
332.60693 165.84958 l
336.84958 161.60695 l
h
329.07141 158.07141 m
S
1 1 1 sc
CM
329.72791 32.727909 m
336.75739 25.698477 336.75739 14.301524 329.72791 7.2720919 c
322.69849 0.242624 311.30151 0.242624 304.27209 7.2720919 c
297.24261 14.301524 297.24261 25.698477 304.27209 32.727909 c
311.30151 39.757378 322.69849 39.757378 329.72791 32.727909 c
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -97 344 cm
426.72791 311.27209 m
433.75739 318.30151 433.75739 329.69849 426.72791 336.72791 c
419.69849 343.75739 408.30151 343.75739 401.27209 336.72791 c
394.24261 329.69849 394.24261 318.30151 401.27209 311.27209 c
408.30151 304.24261 419.69849 304.24261 426.72791 311.27209 c
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 317 20 cm
-4.448 5.776001 m
($)s
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -97 344 cm
406.90756 307.45099 m
397.99225 286.64856 l
S
0 i
CM
297.84088 64.704613 m
298.2348 56.169697 l
303.74966 58.533211 l
h
297.84088 64.704613 m
f
0 J
0 j
1 0 0 -1 -97 344 cm
394.84088 279.29538 m
395.2348 287.83029 l
400.74966 285.4668 l
h
394.84088 279.29538 m
S
ep
end
%%Trailer
%%EOF
