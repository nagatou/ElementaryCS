%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 245.000000 179.000000
%APL_DSC_Encoding: UTF8
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 245 179
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 245 179
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /I put
dup 34 /c put
dup 35 /e put
dup 36 /percent put
dup 37 /r put
dup 38 /a put
dup 39 /m put
dup 40 /zero put
dup 41 /x put
dup 42 /four put
dup 43 /nine put
dup 44 /six put
dup 45 /three put
dup 46 /five put
dup 47 /two put
dup 48 /seven put
dup 49 /one put
dup 50 /d put
dup 51 /s put
dup 52 /t put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<







2B01BF0003003E0037002B001F00130000001C2B00BF0002004A0037002B001F00130000001C2B00BA00040004001B2BB8000120457D691844B8000A2BB800002B000000
00>] def
/CharStrings 22 dict dup begin
/.notdef 0 def
/percent 1 def
/zero 2 def
/one 3 def
/two 4 def
/three 5 def
/four 6 def
/five 7 def
/six 8 def
/seven 9 def
/nine 10 def
/I 11 def
/a 12 def
/c 13 def
/d 14 def
/e 15 def
/m 16 def
/r 17 def
/s 18 def
/t 19 def
/x 20 def
/uni2B91 21 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4151493 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C92608F4984E4A5769B1336AE461E05CD208550769783E471D7C20DE95C51309D8BFF0985CA72489C3AB6E0680D2CAA7DBB61EF391F6EEAACD3E1CECC7F6D8ACD10501D50B8FACD476183D2CE2334F06769F039144E3497BD2DC19136398C74EAE6F5DACBAB1108582845220603B780909E1291303F117A7F38B25B4D68E57C290D2579063C8BE9A3AB644BC2F98E6750750BD6511A5080E7B841F1CAF3D81A8756A9D51CFD506AA11CE99BAA51E2F696B624D56A36DBEE9263FBA54844AA4D3E25BD94E9A4BAA19099CB84DCCDBAF1DC14DC0A92A338692C0EA056754C05525CFF9B22441A5DF2857B6C2C7A758FEE7E876E4B6BF4509F5356B2C2451E4F5734F276E63108AF2E105CF2F090437E9243AC39CB3EDBFF8684C2C6F21D664054EBE494FD522B518495B6C109B0EFB30262C84F4532291B5C99B7724412D98E21773DFF65D12D298C2D31F43C31F79306C3B64AB0FD043386AC78F7112FABAB8123EA10E88F7506CBB544060CBB2B9E7051BC1086EFFB261C92B352D13E90DB8630B78693679D3174AD9B4714E43D4F144789F0CDDDFC8E9CDD39E12A03F617420575E7603CC414BE1915F9BC00E9893C6C5DF1B0BF1930CDEE35F1646D85E5E674927B18E822DDF95527C8E154C6DF1B4F1854BAC48E524FF49E2489B6CA2B5973C13A1F042334C6B0364BC23CA4701620A8500DFEB0EB0951D1BED354EF6CF27DE18591462345E60747D5E0256EC5D63A8FA05519170BF14304F1A0472B7C1FB426
2E4BAE294B8AFB453DAC2169203DE64C42B0855CFD76A5C2B90BA3CDAE62780767989D1C40961B0F9A962B782A635C5D413D1FEB6E72F1AF0776FED2DE1C2866F7E70A01EBCFF06913ABD5B891BAAFFFF9A332B0DCC613CDD1A5EDAE2C88CFC5C392D622F3C8289C6AF24E968D93F34BB07CC2BD126EFBADB966A4D394F11FE2801AFC02EE2D656AB27CA96B356947B9059648A173368FC2E168C82447E7EC1CF039DE648BD01B462541D0117A5C8274A196FAA79BFBC91553FEA8786BC13354522F34822D6FE6CA1EB4AAA221B6882FFF65D7718CA28301527BDD1C2C3F13AB520EDD764702590CD3541FE94FCF115CCA99E4B28C9A3A08C5FB1593AEC3468E870AC7F81DD216A0088DAEB60FCF5404F9DB72FB63B5F6804163810F1F329CA56EE52B30A5552AD77A26635CA3D5A3BCE131669A22DBF1309B9D82FC7AF9F1893E1101AA6085512B379D03B7E67B229D771D4501674F7765FC6F79C7C99194A9124F558FB6E1A63A86F69B96CE1B2C5E08769301B79C1EF5DFFF8B420525C0377E974C61BD935FD0FC8AB60AB5BE3E070240EF7E4B21CA1246872C13E4C6A4110813595AF766AE696D0B8A341AEADE72178ECEAD0B6A1BEE0A5D508F11A97A8E0774846B015F55C6AD36832BB23C30DD81A34B541673A52857525473398F59962EBEDBE8ADAEF9CF3BFAC6C2FC1F21CCB6A1D6D11492F1F8039ED5F866F0E7A654ACA99FE2F8889EFD9F9EBE1D853248006A75F4B35F9314B905BA96816186BA419C89A639556C0CDFDBD0C3A61F4BE64A041E33C5406DC82F97950ADBEA44D949D74A18ED2B6389E28C62E0A9FD1FA1141D98C3686AAB836277B805AA5312BFFFF009BC9BB3155F77CFDEDEB8E757F66E898AB0086DD6A242D88F406DCE661C2776D06B19E62FFA9569AF13F075BB5DAFC423EEC09198763411B4974031BAD03E2551A932F8700D3DE831FD9B24E92BDB4D6E101FC8B68A40A764D5F469FBC3A1D209FA691C536D23536C57DB658B463841EC57EE45E76313AD0EC6CCA3356F5B69F7FB244C8F88652109D9DD58B8E56D8741856B6795A06CCED74DFE536CCEE9CF4A60E0726A7A8BF4A64B62DA68C35937A3E870376776C27249D3A847264FFA950CE94F45EDE3B70CE2C7FD5806C325928C2717BBD15D307F3B7C36437B7942A2758E182F6A6AD59EC2BA193F2DB4B93155F416D15816B1C1E778B2BFF6860021DAB5FE84916CDE1FA91FBFA303B5D58755617E6933A5FA0B7A52C8F9001C721AED40F8DCD3709CAD8D3E7F34531399A881893E03D80C474F787972F0B93BD9B71211C37775C01682D0E4CA8F6F14EA1984509CA13B159281263CE0B421866B9C0735EB4695F6861BD58FFAE5898FBB059F6EECF110F6CB9247ACE6BAD6DDA8BC341BC33A1A66394DF53E3368D987C8F6B804CBF94A0AFC75938D1DE03BA4

09BCC19F532800235B2C45E36078C77F8D9E97E9B54ECE24C0111F51B8125276A6EEE4B5ABFF32445FBBB082111AB967F2EC828DE47C84190BC258A48814F4F4FBDBD5DB8D9EE9D48A13ED94DA0BC75FEEF700BFC67527A7C93ADEA888A38CF2D5BEE485C0D988C14132CC3038DC3BCE4D26C281FD147B4CE0BAC23C6E4B03DB74216FBB97835EE3BED5682DE35E46ACB8C9E5CDFB49895AFFDDDE2E6B3E2079660081291BF35A196FCC579A42D4AF9BFA9DB5BD70118D4D48E102AD38EC4AEF26025513830D2F1F54C533EF077A9B12138705C263367B49FCAF217B39AC3FDF751E9E6E749B91229E1CB622C024A17BEE21223AA92AB52EA25F82D663A359A049713073C7F0184E9388B3482BAB7FE1C382E045FE17AB2B15CAAB4098C7575B7C7FF3EC050C3569007666C93C303E801979869CD922AF74199002790C82DEA8952B9486663A768950E20FC1DFC83821B672CD192C47DF060EA06C0280578653871A3F6E8CE2FC8906EC74B842734F10709E533774BE23DAA4FEECC2E74BAEA122CC8E542334D7F6A906616E1008C943B09E97154334D93914968EA91C2937A151CFC679EB417ED7F2ED2CC0DB837AC4CE8DE8CCB2E906D65F27E621D46D63392F0520805C78F001785A52ED094FD4CDD0BAAD7C0FEC53F780A0217933111A1D42752780693810A74B3FBD51FAA72C04FF3C33328ECCFDB70F5B62158B9620A17213A25F1FE88F77CC6C68ACF9F46E3FA6186596CFC4E1210CCD85A16755DB8BEC64065E9531AE4A7B2C2B7729CD61818DD18F5701A8B6849EE637539E234666EF5F24366C03CD1499CA3AF12B76862774A64F28E3488C56DA75F215252AE6C0B4F5BEB4BD2F5EA1BE0C413AAE4EE6817E20BD770239338E26D2034E9F502488FF465A0748821FAD565EF71A2D6DFDFE744E2F0527F6790601DBBC00AB16188542E030B5D06F58FBE6566F73C24375B6BDDCB6A0B1CEAD221679E0123345B199BFA8F427A3CE3CB7179190EAB2243C20F56652B573DC70014A4D8CD21AFA3FA66CC9DD8141735B5484D04BE6343BCB10103E9B3BC8C462C387CFD4B30F40912105AA8311A48BA89D5705FE04C09422AA3C38AC50C2FAC7E814AFB5EBC9D2CD358C8CB408ABAA905213B14B36CD02FAEAC27EBD6BC16D2A441D02D53CFCB88827F3B28FA30E74220FF31CC9A2FB75AB39B47329A12D8824B6CBFAB8674AD9232E8F239FBB0D2265C0CC5B341E82C72D3F6687D74B72AFB7FAC953BD1D4483014AC675BACAA476ECF205885E83A54EF1D6C73CD808E84855D45672FAEF87910CE205BBB7B8E0BBAD5919DC0DD8C05B247B774D88F40B133935D47B8289117540BEE013605BFA1A582CDAD0F8D3B72AD5788A07DD4FFC4FD11B644E063A40E9BCA5CD8572A450628F062B2182DDE5025DF09FB51C8999C0B78303168E45411D4AB2
4398377D1B9C5E2ADEC7CD0B36F473904E5C6FBF2E10CFE7397C2C710920186BB2ADEEF556A26AD79F086CBF9B1B528C9EA1700CCB3386989E616ED2F236CB02FE1280621CD7AD460D2CF2AF14AD473DF52CB468315AB5E003D5121E3F631EADF172A0C024055C2D9D703DEF079AEB3134B8FAD96797771EBAFB28B29CA4030713DF00517374F85897DD84BFDD73F4492D466B9D3E353222C4BF7A7408BA2413369C1A630B9B436549CC6960DCD0E58CF81043FE3C24CD685699D91A7DE8788AF0E228679B0B3E14AF01D7623FD843E7E13120FACAEFDACE0B4F6339F7C323B68853BE6623BC897D5910E5633498AA750591BC0A1F36443C819E731D66DDAA4043BAD8D702116F5DD473248E5EFA39DBEC28B3C2186750F7899CA6CAB1C3C623E0DCB7A67947596DD480F0BC61613DF9A8C5C838A86D28D21538F48DA7ABD4B0BB7AF5D844AE8322260E1644C763B2CCE16CC73B8B2ADBCF4892B25F0EEB895B922789ECB37625604C0049E04EB9BF5DB3DF4BC04A0A0DEF9BDC7C9472C117EC2988E74DA4FFAB37BF555A66682DF4198B62774B3C71A0857A46221342C6F5DD942A9E0AF22A6F2B0C4B8F822BED3897166175D5C93DF087F308CB82C02221846ADF9D75E1A4B236863B5568FD3103D8F2839BC305AAD36552A9D45356E1F57117BAFEE88381135D97F58A2876AD4EDFC516614594CB5FEA7875E9DE87BE2798192009ABDF4FEE48EFA10070E5732A1D52EB8C8EDEAD72FA6DE70D500B649FC21294D6F03154CAA52AFA2251AD9B327EBCB2E78C93733FB4065F2F278ED3BE0AFDB9EF104096BFB65453042B1FCD42AA45D16105C6471A26DA1971A21269D82272F946300782DAF3C949722483CFEBB74F5B7060611273994FB40D1AA27DD5DD5B83D75357AEA11D7C0DD46542B7B7167E620622678E1F6A1BE0CB3A9F61A390074C9FCF39EB0E4CE730D68D4DECAEEA41B583F7A76EF16FCFDC0210B49F950DF1F0B1B87E6AE5FC78B37238E303E660A99635C270A5CA014374620EB02B46DC5ABD79917F018B2684B23193013E73ADF38654B207DD3F15E7B6BC917F8684438ECE51CCA4816B9264E727367F1CB9FD7210A58753C6AC9B886FA36FA14ECED80A601C0AFA375ECC284FAFDE768F6489FD5DABE1556F099B0E89841510763D32C02CA97A2F2A0C5812BFCBDAB8712AC96459B194998561F813FF9D50E732D66C7C814C613C26FF2510EA808CD94138C4B18273AF5F10A8D19D12D9BC1C39547AA7CB2C23BD25B19E3D1E0A51786AE73586DA2E551285655F8A2ED23359D78F8E318A3220B2B9D10BE1D084B6FEA9E70941D8057656820AF66FDCADD00E9F7CE432B566D2F7321400A5BC03804E7F8860F4CCB752435CA1382EC168173BDAEBC06C12F2E6C563783B53ED059D5412FD7AE8805ADB0AECE58947F123F3C608A421
F8029C4A8FBC9D1640E4244A8FF3452900470427C771D459B02C0390EA3CA6BE0116A132AF6ABA9EAC456111407BC939FA3C6A6E7A70A461CD6CE7E353E6393275198A67E83A8B31BEA2F09F82769B859740C628604E4DF072C958281D2CEEB62EF98C692FB471A0F90D4316F4CAFF14BE16CF24880FEFEC7EB13C2C42FA2FB80BB01B77E061595135284EE43494B22204E532697CD2042E06C1A85323560176C031A6AE211740E36A1ED242651EAC49E6D670359B838B79F95CF6C9F726BBAA9D496B19746DEF
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 245 179 rc
-54 218 m
567 218 l
567 -599 l
-54 -599 l
h
-54 218 m
f
0 164 m
72 164 l
72 146 l
0 146 l
h
0 164 m
f
/Cs2 SC
0 sc
1 0 0 -1 36 155 cm
/F1.1[ 16 0 0 -16 0 0]sf
-2.072 5.776001 m
(!)s
/Cs1 SC
1 1 1 sc
CM
0 146 m
72 146 l
72 128 l
0 128 l
h
0 146 m
f
/Cs2 SC
0 sc
1 0 0 -1 36 137 cm
-4.296 5.776001 m
(")s
/Cs1 SC
1 1 1 sc
CM
0 128 m
72 128 l
72 110 l
0 110 l
h
0 128 m
f
/Cs2 SC
0 sc
1 0 0 -1 36 119 cm
-4.296 5.776001 m
(#)s
/Cs1 SC
1 1 1 sc
CM
0 110 m
72 110 l
72 92 l
0 92 l
h
0 110 m
f
/Cs2 SC
0 sc
1 0 0 -1 36 101 cm
-8 5.776001 m
($)s
/Cs1 SC
1 1 1 sc
CM
0 92 m
72 92 l
72 74 l
0 74 l
h
0 92 m
f
/Cs2 SC
0 sc
1 0 0 -1 36 83 cm
-4.296 5.776001 m
(")s
/Cs1 SC
1 1 1 sc
CM
0 74 m
72 74 l
72 56 l
0 56 l
h
0 74 m
f
/Cs2 SC
0 sc
1 0 0 -1 36 65 cm
-2.664 5.776001 m
(%)s
/Cs1 SC
1 1 1 sc
CM
0 56 m
72 56 l
72 38 l
0 38 l
h
0 56 m
f
/Cs2 SC
0 sc
1 0 0 -1 36 47 cm
-4.296 5.776001 m
(#)s
/Cs1 SC
1 1 1 sc
CM
0 38 m
72 38 l
72 20 l
0 20 l
h
0 38 m
f
/Cs2 SC
0 sc
1 0 0 -1 36 29 cm
-4.296 5.776001 m
(&)s
/Cs1 SC
1 1 1 sc
CM
0 20 m
72 20 l
72 2 l
0 2 l
h
0 20 m
f
/Cs2 SC
0 sc
1 0 0 -1 36 11 cm
-6.8239999 5.776001 m
(')s
/Cs1 SC
1 1 1 sc
CM
171 164 m
243 164 l
243 146 l
171 146 l
h
171 164 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -54 218 cm
225 54 m
297 54 l
297 72 l
225 72 l
h
225 54 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 207 155 cm
-17.488001 5.776001 m
(\(\)*+)[ 8.896000 8.288000 8.896000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
171 146 m
243 146 l
243 128 l
171 128 l
h
171 146 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -54 218 cm
225 72 m
297 72 l
297 90 l
225 90 l
h
225 72 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 207 137 cm
-17.488001 5.776001 m
(\(\),-)[ 8.896000 8.288000 8.896000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
171 128 m
243 128 l
243 110 l
171 110 l
h
171 128 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -54 218 cm
225 90 m
297 90 l
297 108 l
225 108 l
h
225 90 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 207 119 cm
-17.488001 5.776001 m
(\(\),.)[ 8.896000 8.288000 8.896000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
171 110 m
243 110 l
243 92 l
171 92 l
h
171 110 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -54 218 cm
225 108 m
297 108 l
297 126 l
225 126 l
h
225 108 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 207 101 cm
-17.488001 5.776001 m
(\(\)/.)[ 8.896000 8.288000 8.896000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
171 92 m
243 92 l
243 74 l
171 74 l
h
171 92 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -54 218 cm
225 126 m
297 126 l
297 144 l
225 144 l
h
225 126 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 207 83 cm
-17.488001 5.776001 m
(\(\),-)[ 8.896000 8.288000 8.896000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
171 74 m
243 74 l
243 56 l
171 56 l
h
171 74 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -54 218 cm
225 144 m
297 144 l
297 162 l
225 162 l
h
225 144 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 207 65 cm
-17.488001 5.776001 m
(\(\)0/)[ 8.896000 8.288000 8.896000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
171 56 m
243 56 l
243 38 l
171 38 l
h
171 56 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -54 218 cm
225 162 m
297 162 l
297 180 l
225 180 l
h
225 162 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 207 47 cm
-17.488001 5.776001 m
(\(\),.)[ 8.896000 8.288000 8.896000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
171 38 m
243 38 l
243 20 l
171 20 l
h
171 38 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -54 218 cm
225 180 m
297 180 l
297 198 l
225 198 l
h
225 180 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 207 29 cm
-17.488001 5.776001 m
(\(\),1)[ 8.896000 8.288000 8.896000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
171 20 m
243 20 l
243 2 l
171 2 l
h
171 20 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -54 218 cm
225 198 m
297 198 l
297 216 l
225 216 l
h
225 198 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 207 11 cm
-17.784 5.776001 m
(\(\),2)[ 8.896000 8.288000 8.896000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -54 218 cm
135.89999 126 m
216.10001 126 l
S
0 i
CM
170.10001 92 m
162.10001 95 l
162.10001 89 l
h
170.10001 92 m
f
0 J
0 j
1 0 0 -1 -54 218 cm
224.10001 126 m
216.10001 123 l
216.10001 129 l
h
224.10001 126 m
S
CM
73.900002 92 m
81.900002 89 l
81.900002 95 l
h
73.900002 92 m
f
1 0 0 -1 -54 218 cm
127.9 126 m
135.89999 129 l
135.89999 123 l
h
127.9 126 m
S
/Cs2 SC
0 sc
1 0 0 -1 135.0625 164 cm
-9.184 5.776001 m
(34%)[ 8.000000 5.040000 0.000000 ] xS
1 J
1 j
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -54 218 cm
203.5625 54 m
215.10001 54 l
S
0 i
CM
169.10001 164 m
161.10001 167 l
161.10001 161 l
h
169.10001 164 m
f
0 J
0 j
1 0 0 -1 -54 218 cm
223.10001 54 m
215.10001 51 l
215.10001 57 l
h
223.10001 54 m
S
ep
end
%%Trailer
%%EOF
